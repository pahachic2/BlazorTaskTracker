// Kanban Drag and Drop functionality
window.kanbanDragDrop = {
    draggedTaskId: null,
    draggedFromColumnId: null,
    isInitialized: false,

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop –¥–ª—è –∑–∞–¥–∞—á–∏
    initTaskDragDrop: function (taskElementId, taskId, columnId) {
        console.log(`üéØ JS: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag –¥–ª—è –∑–∞–¥–∞—á–∏: ${taskElementId}, ID: ${taskId}, –∫–æ–ª–æ–Ω–∫–∞: ${columnId}`);
        
        const taskElement = document.getElementById(taskElementId);
        if (!taskElement) {
            console.error(`‚ùå JS: Task element –Ω–µ –Ω–∞–π–¥–µ–Ω: ${taskElementId}`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º kanban-task
            const allTasks = document.querySelectorAll('.kanban-task');
            console.log(`üîç JS: –ù–∞–π–¥–µ–Ω–æ ${allTasks.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º kanban-task:`, Array.from(allTasks).map(el => el.id));
            return;
        }

        console.log(`‚úÖ JS: –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: ${taskElementId}`, taskElement);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º
        const rect = taskElement.getBoundingClientRect();
        console.log(`üìê JS: –†–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞ ${taskElementId}:`, rect);
        
        taskElement.draggable = true;
        console.log(`üîß JS: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω draggable=true –¥–ª—è ${taskElementId}`);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (taskElement._dragStartHandler) {
            taskElement.removeEventListener('dragstart', taskElement._dragStartHandler);
            taskElement.removeEventListener('dragend', taskElement._dragEndHandler);
            console.log(`üßπ JS: –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è ${taskElementId}`);
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        taskElement._dragStartHandler = function (e) {
            console.log(`üöÄ JS: DRAGSTART - –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${taskId}`);
            kanbanDragDrop.draggedTaskId = taskId;
            const currentColumn = e.target.closest('.kanban-column');
            if (currentColumn) {
                kanbanDragDrop.draggedFromColumnId = currentColumn.id.replace('column-', '');
            } else {
                kanbanDragDrop.draggedFromColumnId = columnId;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            e.target.style.opacity = '0.5';
            e.target.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', e.target.outerHTML);
            
            console.log(`üì¶ JS: –î–∞–Ω–Ω—ã–µ drag —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:`, {
                taskId: kanbanDragDrop.draggedTaskId,
                fromColumn: kanbanDragDrop.draggedFromColumnId
            });
        };

        taskElement._dragEndHandler = function (e) {
            console.log(`üèÅ JS: DRAGEND - –ö–æ–Ω–µ—Ü –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${taskId}`);
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
            e.target.style.opacity = '1';
            e.target.classList.remove('dragging');
            
            kanbanDragDrop.draggedTaskId = null;
            kanbanDragDrop.draggedFromColumnId = null;
            console.log(`üßπ JS: –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ drag`);
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        taskElement.addEventListener('dragstart', taskElement._dragStartHandler);
        taskElement.addEventListener('dragend', taskElement._dragEndHandler);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        taskElement.addEventListener('mouseenter', function() {
            console.log(`üê≠ JS: –ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ –Ω–∞ –∑–∞–¥–∞—á—É ${taskId} (${taskElementId})`);
        });
        
        console.log(`‚úÖ JS: Drag-and-drop –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏: ${taskId}`);
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drop zone –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏
    initColumnDropZone: function (columnElementId, columnId, dotNetRef) {
        console.log(`üèóÔ∏è JS: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drop zone –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏: ${columnElementId}, ID: ${columnId}`);
        
        const columnElement = document.getElementById(columnElementId);
        if (!columnElement) {
            console.error(`‚ùå JS: Column element –Ω–µ –Ω–∞–π–¥–µ–Ω: ${columnElementId}`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
            const allColumns = document.querySelectorAll('.kanban-column');
            console.log(`üîç JS: –ù–∞–π–¥–µ–Ω–æ ${allColumns.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º kanban-column:`, Array.from(allColumns).map(el => el.id));
            return;
        }

        console.log(`‚úÖ JS: –≠–ª–µ–º–µ–Ω—Ç –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω: ${columnElementId}`, columnElement);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (columnElement._dragOverHandler) {
            columnElement.removeEventListener('dragover', columnElement._dragOverHandler);
            columnElement.removeEventListener('dragleave', columnElement._dragLeaveHandler);
            columnElement.removeEventListener('drop', columnElement._dropHandler);
            console.log(`üßπ JS: –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ ${columnElementId}`);
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        columnElement._dragOverHandler = function (e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
            columnElement.classList.add('drag-over');
            console.log(`üé® JS: DRAGOVER - –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ ${columnId}`);
        };

        columnElement._dragLeaveHandler = function (e) {
            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∫–∏–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
            if (!columnElement.contains(e.relatedTarget)) {
                columnElement.classList.remove('drag-over');
                console.log(`üé® JS: DRAGLEAVE - –£–±—Ä–∞–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ ${columnId}`);
            }
        };

        columnElement._dropHandler = function (e) {
            console.log(`üéØ JS: DROP —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫—É: ${columnId}`, e);
            
            // –í–ê–ñ–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            e.preventDefault();
            e.stopPropagation();
            
            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            columnElement.classList.remove('drag-over');
            
            console.log(`üì¶ JS: –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ drag –ø—Ä–∏ drop:`, {
                taskId: kanbanDragDrop.draggedTaskId,
                fromColumn: kanbanDragDrop.draggedFromColumnId,
                toColumn: columnId,
                eventType: e.type
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            if (!kanbanDragDrop.draggedTaskId) {
                console.log(`‚ö†Ô∏è JS: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è`);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ª–∏ –≤ —Ç—É –∂–µ –∫–æ–ª–æ–Ω–∫—É
            if (kanbanDragDrop.draggedFromColumnId === columnId) {
                console.log(`‚ö†Ô∏è JS: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ —Ç—É –∂–µ –∫–æ–ª–æ–Ω–∫—É ${columnId}, –æ—Ç–º–µ–Ω—è–µ–º`);
                return;
            }
            
            console.log(`üöÄ JS: –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º Blazor –º–µ—Ç–æ–¥ OnTaskDropped`);
            
            try {
                if (dotNetRef && dotNetRef.invokeMethodAsync) {
                    console.log(`üìû JS: –í—ã–∑—ã–≤–∞–µ–º dotNetRef.invokeMethodAsync...`);
                    
                    dotNetRef.invokeMethodAsync('OnTaskDropped', 
                        kanbanDragDrop.draggedTaskId, 
                        kanbanDragDrop.draggedFromColumnId, 
                        columnId)
                        .then(() => {
                            console.log(`‚úÖ JS: Blazor –º–µ—Ç–æ–¥ OnTaskDropped –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                        })
                        .catch((error) => {
                            console.error(`‚ùå JS: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Blazor –º–µ—Ç–æ–¥–∞:`, error);
                        });
                        
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                    setTimeout(() => {
                        kanbanDragDrop.updateTaskColumnId(kanbanDragDrop.draggedTaskId, columnId);
                    }, 100);
                } else {
                    console.log(`‚ö†Ô∏è JS: dotNetRef –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${!dotNetRef ? 'null' : 'no invokeMethodAsync'}), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
                    // Fallback: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ DOM
                    kanbanDragDrop.moveTaskInDOM(kanbanDragDrop.draggedTaskId, kanbanDragDrop.draggedFromColumnId, columnId);
                }
            } catch (error) {
                console.error(`‚ùå JS: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Blazor –º–µ—Ç–æ–¥–∞:`, error);
            }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        columnElement.addEventListener('dragover', columnElement._dragOverHandler);
        columnElement.addEventListener('dragleave', columnElement._dragLeaveHandler);
        columnElement.addEventListener('drop', columnElement._dropHandler);
        
        console.log(`‚úÖ JS: Drop zone –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏: ${columnId}`);
    },

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ data-column-id –∞—Ç—Ä–∏–±—É—Ç–∞ –∑–∞–¥–∞—á–∏
    updateTaskColumnId: function(taskId, newColumnId) {
        console.log(`üîÑ JS: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ data-column-id –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId} –Ω–∞ ${newColumnId}`);
        const taskElement = document.getElementById(`task-${taskId}`);
        if (taskElement) {
            taskElement.setAttribute('data-column-id', newColumnId);
            console.log(`‚úÖ JS: –ê—Ç—Ä–∏–±—É—Ç data-column-id –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}`);
        }
    },

    // Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ DOM
    moveTaskInDOM: function(taskId, fromColumnId, toColumnId) {
        console.log(`üîÑ JS: Fallback –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ${taskId} –∏–∑ ${fromColumnId} –≤ ${toColumnId}`);
        
        const taskElement = document.getElementById(`task-${taskId}`);
        const targetColumn = document.getElementById(`column-${toColumnId}`);
        
        if (taskElement && targetColumn) {
            const taskList = targetColumn.querySelector('.space-y-3');
            if (taskList) {
                taskList.appendChild(taskElement);
                kanbanDragDrop.updateTaskColumnId(taskId, toColumnId);
                console.log(`‚úÖ JS: –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ DOM`);
            }
        }
    },

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    autoInitialize: function() {
        console.log(`ü§ñ JS: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop...`);
        
        if (kanbanDragDrop.isInitialized) {
            console.log(`‚ö†Ô∏è JS: –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }
        
        const tasks = document.querySelectorAll('.kanban-task');
        const columns = document.querySelectorAll('.kanban-column');
        
        console.log(`üîç JS: –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –∏ ${columns.length} –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns.forEach(column => {
            const columnId = column.id.replace('column-', '');
            kanbanDragDrop.initColumnDropZone(column.id, columnId, null);
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        tasks.forEach(task => {
            const taskId = task.getAttribute('data-task-id');
            const columnId = task.getAttribute('data-column-id');
            if (taskId && columnId) {
                kanbanDragDrop.initTaskDragDrop(task.id, taskId, columnId);
            }
        });
        
        kanbanDragDrop.isInitialized = true;
        console.log(`‚úÖ JS: –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    },

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    cleanup: function () {
        console.log('üßπ JS: –û—á–∏—Å—Ç–∫–∞ drag-and-drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
        kanbanDragDrop.draggedTaskId = null;
        kanbanDragDrop.draggedFromColumnId = null;
        kanbanDragDrop.isInitialized = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MutationObserver
        if (kanbanDragDrop.observer) {
            kanbanDragDrop.observer.disconnect();
            kanbanDragDrop.observer = null;
            console.log('üßπ JS: MutationObserver –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag-and-drop
        const tasks = document.querySelectorAll('.kanban-task');
        console.log(`üßπ JS: –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏`);
        tasks.forEach(task => {
            if (task._dragStartHandler) {
                task.removeEventListener('dragstart', task._dragStartHandler);
                task.removeEventListener('dragend', task._dragEndHandler);
                task._dragStartHandler = null;
                task._dragEndHandler = null;
            }
        });
        
        const columns = document.querySelectorAll('.kanban-column');
        console.log(`üßπ JS: –ù–∞–π–¥–µ–Ω–æ ${columns.length} –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏`);
        columns.forEach(column => {
            if (column._dragOverHandler) {
                column.removeEventListener('dragover', column._dragOverHandler);
                column.removeEventListener('dragleave', column._dragLeaveHandler);
                column.removeEventListener('drop', column._dropHandler);
                column._dragOverHandler = null;
                column._dragLeaveHandler = null;
                column._dropHandler = null;
            }
        });
        
        console.log('‚úÖ JS: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    },

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
    setupDOMObserver: function() {
        if (kanbanDragDrop.observer) {
            console.log('‚ö†Ô∏è JS: MutationObserver —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        console.log('üëÄ JS: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM');
        
        kanbanDragDrop.observer = new MutationObserver(function(mutations) {
            let shouldReinitialize = false;
            
            mutations.forEach(function(mutation) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(function(node) {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∏
                            if (node.classList && (node.classList.contains('kanban-task') || node.classList.contains('kanban-column'))) {
                                console.log(`üîç JS: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç:`, node.className, node.id);
                                shouldReinitialize = true;
                            }
                            
                            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                            const newTasks = node.querySelectorAll && node.querySelectorAll('.kanban-task');
                            const newColumns = node.querySelectorAll && node.querySelectorAll('.kanban-column');
                            if ((newTasks && newTasks.length > 0) || (newColumns && newColumns.length > 0)) {
                                console.log(`üîç JS: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${newTasks ? newTasks.length : 0} –∑–∞–¥–∞—á, ${newColumns ? newColumns.length : 0} –∫–æ–ª–æ–Ω–æ–∫`);
                                shouldReinitialize = true;
                            }
                        }
                    });
                }
            });
            
            if (shouldReinitialize) {
                console.log('üîÑ JS: MutationObserver –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é drag-and-drop');
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                setTimeout(() => {
                    kanbanDragDrop.forceReinitialize();
                }, 300);
            }
        });
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ document.body
        kanbanDragDrop.observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: false
        });
        
        console.log('‚úÖ JS: MutationObserver –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω');
    },

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    forceReinitialize: function() {
        console.log('üîÑ JS: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop');
        
        const tasks = document.querySelectorAll('.kanban-task');
        const columns = document.querySelectorAll('.kanban-column');
        
        console.log(`üîç JS: –ù–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${tasks.length} –∑–∞–¥–∞—á –∏ ${columns.length} –∫–æ–ª–æ–Ω–æ–∫`);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns.forEach(column => {
            const columnId = column.id.replace('column-', '');
            if (columnId) {
                kanbanDragDrop.initColumnDropZone(column.id, columnId, null);
            }
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        tasks.forEach(task => {
            const taskId = task.getAttribute('data-task-id');
            const columnId = task.getAttribute('data-column-id');
            if (taskId && columnId) {
                kanbanDragDrop.initTaskDragDrop(task.id, taskId, columnId);
            }
        });
        
        console.log('‚úÖ JS: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    waitForElement: function(selector, timeout = 5000) {
        return new Promise((resolve, reject) => {
            const element = document.querySelector(selector);
            if (element) {
                resolve(element);
                return;
            }
            
            const observer = new MutationObserver(() => {
                const element = document.querySelector(selector);
                if (element) {
                    observer.disconnect();
                    resolve(element);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
            
            setTimeout(() => {
                observer.disconnect();
                reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ ${timeout}–º—Å`));
            }, timeout);
        });
    }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω
console.log('üöÄ JS: kanbanDragDrop –æ–±—ä–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', window.kanbanDragDrop);

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ JS: DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º MutationObserver
    kanbanDragDrop.setupDOMObserver();
    
    setTimeout(() => {
        const tasks = document.querySelectorAll('.kanban-task');
        const columns = document.querySelectorAll('.kanban-column');
        console.log(`üîç JS: –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM –Ω–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –∏ ${columns.length} –∫–æ–ª–æ–Ω–æ–∫`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ Blazor –Ω–µ —Å–¥–µ–ª–∞–ª —ç—Ç–æ–≥–æ
        setTimeout(() => {
            if (!kanbanDragDrop.isInitialized) {
                console.log(`‚è∞ JS: Blazor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª drag-and-drop, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...`);
                kanbanDragDrop.autoInitialize();
            }
        }, 2000);
    }, 1000);
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
window.reinitializeDragDrop = function() {
    console.log('üîß JS: –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop');
    kanbanDragDrop.forceReinitialize();
}; 
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Net;
using TaskTracker.Models;
using TaskTracker.Models.DTOs;
using TaskTracker.Web.Services;
using Microsoft.AspNetCore.Components;

namespace TaskTracker.Web.Services;

public class ApiService : IApiService
{
    private readonly HttpClient _httpClient;
    private readonly ILocalStorageService _localStorage;
    private readonly IToastService _toastService;
    private readonly JsonSerializerOptions _jsonOptions;
    private readonly NavigationManager _navigationManager;

    public ApiService(HttpClient httpClient, ILocalStorageService localStorage, IToastService toastService, NavigationManager navigationManager)
    {
        _httpClient = httpClient;
        _localStorage = localStorage;
        _toastService = toastService;
        _navigationManager = navigationManager;
        _jsonOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };
    }

    // –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    public async Task<AuthResponse?> LoginAsync(LoginRequest request)
    {
        var response = await PostAsync<LoginRequest, AuthResponse>("/api/auth/login", request);
        if (response != null)
        {
            await SetAuthenticationHeaderAsync(response.Token);
            _toastService.ShowSuccess("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", $"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ {response.Username}");
        }
        return response;
    }

    public async Task<AuthResponse?> RegisterAsync(RegisterRequest request)
    {
        var response = await PostAsync<RegisterRequest, AuthResponse>("/api/auth/register", request);
        if (response != null)
        {
            await SetAuthenticationHeaderAsync(response.Token);
            _toastService.ShowSuccess("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", $"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {response.Username}!");
        }
        return response;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ)
    public async Task<List<OrganizationResponse>> GetUserOrganizationsAsync()
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<List<OrganizationResponse>>("/api/organizations") ?? new List<OrganizationResponse>();
    }

    public async Task<OrganizationResponse?> GetOrganizationByIdAsync(string organizationId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<OrganizationResponse>($"/api/organizations/{organizationId}");
    }

    public async Task<OrganizationResponse?> CreateOrganizationAsync(CreateOrganizationRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PostAsync<CreateOrganizationRequest, OrganizationResponse>("/api/organizations", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!", $"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è \"{response.Name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
        }
        return response;
    }

    public async Task<OrganizationResponse?> UpdateOrganizationAsync(string organizationId, UpdateOrganizationRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PutAsync<UpdateOrganizationRequest, OrganizationResponse>($"/api/organizations/{organizationId}", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", $"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è \"{response.Name}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        }
        return response;
    }

    public async Task<bool> DeleteOrganizationAsync(string organizationId)
    {
        await SetAuthorizationHeaderAsync();
        var success = await DeleteAsync($"/api/organizations/{organizationId}");
        if (success)
        {
            _toastService.ShowSuccess("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
        }
        return success;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    public async Task<List<ProjectResponse>> GetUserProjectsAsync()
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<List<ProjectResponse>>("/api/projects") ?? new List<ProjectResponse>();
    }

    public async Task<ProjectResponse?> GetProjectByIdAsync(string projectId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<ProjectResponse>($"/api/projects/{projectId}");
    }

    public async Task<ProjectResponse?> CreateProjectAsync(CreateProjectRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PostAsync<CreateProjectRequest, ProjectResponse>("/api/projects", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!", $"–ü—Ä–æ–µ–∫—Ç \"{response.Name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
        }
        return response;
    }

    public async Task<ProjectResponse?> UpdateProjectAsync(string projectId, UpdateProjectRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PutAsync<UpdateProjectRequest, ProjectResponse>($"/api/projects/{projectId}", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!", $"–ü—Ä–æ–µ–∫—Ç \"{response.Name}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
        }
        return response;
    }

    public async Task<bool> DeleteProjectAsync(string projectId)
    {
        await SetAuthorizationHeaderAsync();
        var success = await DeleteAsync($"/api/projects/{projectId}");
        if (success)
        {
            _toastService.ShowSuccess("–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω!", "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
        }
        return success;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–Ω–±–∞–Ω –¥–æ—Å–∫–∏
    public async Task<List<ColumnResponse>> GetProjectColumnsAsync(string projectId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<List<ColumnResponse>>($"/api/kanban/projects/{projectId}/columns") ?? new List<ColumnResponse>();
    }

    public async Task<ColumnResponse?> CreateColumnAsync(CreateColumnRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PostAsync<CreateColumnRequest, ColumnResponse>("/api/kanban/columns", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", $"–ö–æ–ª–æ–Ω–∫–∞ \"{response.Title}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç");
        }
        return response;
    }

    public async Task<ColumnResponse?> UpdateColumnAsync(string columnId, UpdateColumnRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PutAsync<UpdateColumnRequest, ColumnResponse>($"/api/kanban/columns/{columnId}", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ö–æ–ª–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", $"–ö–æ–ª–æ–Ω–∫–∞ \"{response.Title}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        }
        return response;
    }

    public async Task<bool> DeleteColumnAsync(string columnId)
    {
        await SetAuthorizationHeaderAsync();
        var success = await DeleteAsync($"/api/kanban/columns/{columnId}");
        if (success)
        {
            _toastService.ShowSuccess("–ö–æ–ª–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", "–ö–æ–ª–æ–Ω–∫–∞ –∏ –≤—Å–µ –µ—ë –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã");
        }
        return success;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–¥–∞—á
    public async Task<List<TaskResponse>> GetColumnTasksAsync(string columnId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<List<TaskResponse>>($"/api/kanban/columns/{columnId}/tasks") ?? new List<TaskResponse>();
    }

    public async Task<TaskResponse?> GetTaskByIdAsync(string taskId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<TaskResponse>($"/api/kanban/tasks/{taskId}");
    }

    public async Task<TaskResponse?> CreateTaskAsync(CreateTaskRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PostAsync<CreateTaskRequest, TaskResponse>("/api/kanban/tasks", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!", $"–ó–∞–¥–∞—á–∞ \"{response.Title}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç");
        }
        return response;
    }

    public async Task<TaskResponse?> UpdateTaskAsync(string taskId, UpdateTaskRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PutAsync<UpdateTaskRequest, TaskResponse>($"/api/kanban/tasks/{taskId}", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", $"–ó–∞–¥–∞—á–∞ \"{response.Title}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        }
        return response;
    }

    public async Task<bool> DeleteTaskAsync(string taskId)
    {
        await SetAuthorizationHeaderAsync();
        var success = await DeleteAsync($"/api/kanban/tasks/{taskId}");
        if (success)
        {
            _toastService.ShowSuccess("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
        }
        return success;
    }

    public async Task<TaskResponse?> MoveTaskAsync(string taskId, MoveTaskRequest request)
    {
        await SetAuthorizationHeaderAsync();
        
        var endpoint = $"/api/kanban/tasks/{taskId}/move";
        Console.WriteLine($"üåê API CLIENT: –û—Ç–ø—Ä–∞–≤–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {endpoint}");
        Console.WriteLine($"üì¶ API CLIENT: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ - NewColumnId: {request.NewColumnId}, NewOrder: {request.NewOrder}");
        
        var result = await PutAsync<MoveTaskRequest, TaskResponse>(endpoint, request);
        
        if (result != null)
        {
            Console.WriteLine($"‚úÖ API CLIENT: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - TaskId: {result.Id}, ColumnId: {result.ColumnId}");
            _toastService.ShowSuccess("–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞!", $"–ó–∞–¥–∞—á–∞ \"{result.Title}\" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞");
        }
        else
        {
            Console.WriteLine($"‚ùå API CLIENT: –ü–æ–ª—É—á–µ–Ω null –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
        
        return result;
    }

    // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô

    // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    public async Task<List<OrganizationMemberResponse>> GetOrganizationMembersAsync(string organizationId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<List<OrganizationMemberResponse>>($"/api/organizations/{organizationId}/members") ?? new List<OrganizationMemberResponse>();
    }

    // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
    public async Task<InvitationResponse?> InviteUserAsync(string organizationId, InviteUserRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PostAsync<InviteUserRequest, InvitationResponse>($"/api/organizations/{organizationId}/invitations", request);
        if (response != null)
        {
            if (response.UserWasRegistered && !response.EmailSent)
            {
                _toastService.ShowSuccess("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.Email} —É–≤–∏–¥–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É");
            }
            else if (!response.UserWasRegistered && response.EmailSent)
            {
                _toastService.ShowSuccess("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", $"Email —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {request.Email}");
            }
            else
            {
                _toastService.ShowSuccess("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", $"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {request.Email}");
            }
        }
        return response;
    }

    public async Task<List<InvitationResponse>> GetOrganizationInvitationsAsync(string organizationId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<List<InvitationResponse>>($"/api/organizations/{organizationId}/invitations") ?? new List<InvitationResponse>();
    }

    public async Task<bool> RevokeInvitationAsync(string invitationId)
    {
        await SetAuthorizationHeaderAsync();
        var success = await DeleteAsync($"/api/organizations/invitations/{invitationId}");
        if (success)
        {
            _toastService.ShowSuccess("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–æ–∑–≤–∞–Ω–æ!", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ");
        }
        return success;
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    public async Task<InvitationInfoResponse?> GetInvitationInfoAsync(string token)
    {
        return await GetAsync<InvitationInfoResponse>($"/api/invitations/{token}");
    }

    public async Task<AcceptInvitationResponse?> AcceptInvitationAsync(AcceptInvitationRequest request)
    {
        Console.WriteLine($"üåê API_SERVICE: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º {request.Token[..10]}...");
        Console.WriteLine($"üåê API_SERVICE: URL: /api/organizations/invitations/{request.Token}/accept");
        
        // Endpoint —Ç–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ organizations
        var response = await PostAsync<AcceptInvitationRequest, AcceptInvitationResponse>($"/api/organizations/invitations/{request.Token}/accept", request);
        
        Console.WriteLine($"üåê API_SERVICE: –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç. Response: {response != null}, Success: {response?.Success}");
        
        if (response != null)
        {
            Console.WriteLine($"üåê API_SERVICE: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —É—Å–ø–µ—Ö–∞");
            _toastService.ShowSuccess("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!", $"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é {response.Organization?.Name ?? "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é"}!");
        }
        else
        {
            Console.WriteLine($"‚ùå API_SERVICE: –û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ null");
        }
        
        return response;
    }

    public async Task<bool> DeclineInvitationAsync(DeclineInvitationRequest request)
    {
        // –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        var success = await PostAsyncPublic<DeclineInvitationRequest, object>($"/api/invitations/{request.Token}/decline", request) != null;
        if (success)
        {
            _toastService.ShowInfo("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é");
        }
        return success;
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public async Task<List<InvitationResponse>> GetUserInvitationsAsync()
    {
        try
        {
            Console.WriteLine("üåê API: –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            await SetAuthorizationHeaderAsync();
            
            var result = await GetAsync<List<InvitationResponse>>("/api/organizations/user/invitations") ?? new List<InvitationResponse>();
            Console.WriteLine($"üåê API: –ü–æ–ª—É—á–µ–Ω–æ {result.Count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
            
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {ex.Message}");
            throw;
        }
    }

    // –ü–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    public async Task<UserSearchResponse?> SearchUserByEmailAsync(string organizationId, string email)
    {
        try
        {
            await SetAuthorizationHeaderAsync();
            Console.WriteLine($"üîç API CLIENT: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: {email}");
            
            var response = await _httpClient.GetAsync($"/api/organizations/{organizationId}/search-user?email={Uri.EscapeDataString(email)}");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<UserSearchResponse>(json, _jsonOptions);
                Console.WriteLine($"‚úÖ API CLIENT: –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω: {result?.Found}");
                return result;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"‚ùå API CLIENT: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.StatusCode} - {errorContent}");
                return new UserSearchResponse { Found = false, User = null };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå API CLIENT: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}: {ex.Message}");
            return new UserSearchResponse { Found = false, User = null };
        }
    }

    public async Task<bool> AddExistingUserAsync(string organizationId, string userId, OrganizationRole role = OrganizationRole.Member)
    {
        try
        {
            await SetAuthorizationHeaderAsync();
            Console.WriteLine($"‚ûï API CLIENT: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId} –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é {organizationId}");
            
            var request = new { UserId = userId, Role = role };
            var response = await PostAsync<object, object>($"/api/organizations/{organizationId}/add-user", request);
            
            if (response != null)
            {
                Console.WriteLine($"‚úÖ API CLIENT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {userId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω");
                _toastService.ShowSuccess("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é");
                return true;
            }
            
            Console.WriteLine($"‚ùå API CLIENT: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå API CLIENT: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}: {ex.Message}");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", ex.Message);
            return false;
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private async Task<T?> GetAsync<T>(string endpoint)
    {
        try
        {
            Console.WriteLine($"üåê API: GET –∑–∞–ø—Ä–æ—Å –∫ {endpoint}");
            Console.WriteLine($"üåê API: BaseAddress = {_httpClient.BaseAddress}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (_httpClient.DefaultRequestHeaders.Authorization != null)
            {
                Console.WriteLine($"üåê API: Authorization header = {_httpClient.DefaultRequestHeaders.Authorization.Scheme} {_httpClient.DefaultRequestHeaders.Authorization.Parameter?[..10]}...");
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è API: Authorization header –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
            }

            var response = await _httpClient.GetAsync(endpoint);
            
            Console.WriteLine($"üåê API: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"üåê API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {content.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                var result = JsonSerializer.Deserialize<T>(content, _jsonOptions);
                return result;
            }
            
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"‚ùå API: –û—à–∏–±–∫–∞ {response.StatusCode}: {errorContent}");
            
            if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                Console.WriteLine("üîí API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω");
                _navigationManager.NavigateTo("/login");
            }
            
            return default;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå API: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ GET {endpoint}: {ex.Message}");
            Console.WriteLine($"‚ùå API: Stack trace: {ex.StackTrace}");
            throw;
        }
    }

    private async Task<TResponse?> PostAsync<TRequest, TResponse>(string endpoint, TRequest data)
    {
        try
        {
            Console.WriteLine($"üåê API: POST –∑–∞–ø—Ä–æ—Å –∫ {endpoint}");
            await SetAuthorizationHeaderAsync();
            
            var json = JsonSerializer.Serialize(data, _jsonOptions);
            Console.WriteLine($"üåê API: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {json}");
            
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            Console.WriteLine($"üåê API: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å...");
            var response = await _httpClient.PostAsync(endpoint, content);
            Console.WriteLine($"üåê API: –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"üåê API: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {responseJson}");
                var result = JsonSerializer.Deserialize<TResponse>(responseJson, _jsonOptions);
                return result;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"‚ùå API: –û—à–∏–±–∫–∞ {response.StatusCode}: {errorContent}");
                _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è", $"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.StatusCode}");
                Console.WriteLine($"POST {endpoint} failed: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå API: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ POST {endpoint}: {ex.Message}");
            Console.WriteLine($"‚ùå API: Stack trace: {ex.StackTrace}");
            _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            Console.WriteLine($"Error in POST {endpoint}: {ex.Message}");
        }
        return default;
    }

    private async Task<TResponse?> PostAsyncPublic<TRequest, TResponse>(string endpoint, TRequest data)
    {
        try
        {
            var json = JsonSerializer.Serialize(data, _jsonOptions);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await _httpClient.PostAsync(endpoint, content);
            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<TResponse>(responseJson, _jsonOptions);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è", $"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.StatusCode}");
                Console.WriteLine($"POST {endpoint} failed: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            Console.WriteLine($"Error in POST {endpoint}: {ex.Message}");
        }
        return default;
    }

    private async Task<TResponse?> PutAsync<TRequest, TResponse>(string endpoint, TRequest data)
    {
        try
        {
            var json = JsonSerializer.Serialize(data, _jsonOptions);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await _httpClient.PutAsync(endpoint, content);
            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<TResponse>(responseJson, _jsonOptions);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _toastService.ShowError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", $"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.StatusCode}");
                Console.WriteLine($"PUT {endpoint} failed: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            Console.WriteLine($"Error in PUT {endpoint}: {ex.Message}");
        }
        return default;
    }

    private async Task<bool> DeleteAsync(string endpoint)
    {
        try
        {
            var response = await _httpClient.DeleteAsync(endpoint);
            if (response.IsSuccessStatusCode)
            {
                return true;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _toastService.ShowError("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", $"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.StatusCode}");
                Console.WriteLine($"DELETE {endpoint} failed: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            Console.WriteLine($"Error in DELETE {endpoint}: {ex.Message}");
        }
        return false;
    }

    private async Task SetAuthenticationHeaderAsync(string token)
    {
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
        await _localStorage.SetAuthTokenAsync(token);
    }

    private async Task SetAuthorizationHeaderAsync()
    {
        var userData = await _localStorage.GetUserDataAsync();
        if (userData.IsAuthenticated && !string.IsNullOrEmpty(userData.Token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userData.Token);
        }
    }
} 
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using TaskTracker.Models.DTOs;

namespace TaskTracker.Web.Services;

public class ApiService : IApiService
{
    private readonly HttpClient _httpClient;
    private readonly ILocalStorageService _localStorage;
    private readonly IToastService _toastService;
    private readonly JsonSerializerOptions _jsonOptions;

    public ApiService(HttpClient httpClient, ILocalStorageService localStorage, IToastService toastService)
    {
        _httpClient = httpClient;
        _localStorage = localStorage;
        _toastService = toastService;
        _jsonOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };
    }

    // –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    public async Task<AuthResponse?> LoginAsync(LoginRequest request)
    {
        var response = await PostAsync<LoginRequest, AuthResponse>("/api/auth/login", request);
        if (response != null)
        {
            await SetAuthenticationHeaderAsync(response.Token);
            _toastService.ShowSuccess("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", $"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ {response.Username}");
        }
        return response;
    }

    public async Task<AuthResponse?> RegisterAsync(RegisterRequest request)
    {
        var response = await PostAsync<RegisterRequest, AuthResponse>("/api/auth/register", request);
        if (response != null)
        {
            await SetAuthenticationHeaderAsync(response.Token);
            _toastService.ShowSuccess("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", $"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {response.Username}!");
        }
        return response;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    public async Task<List<ProjectResponse>> GetUserProjectsAsync()
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<List<ProjectResponse>>("/api/projects") ?? new List<ProjectResponse>();
    }

    public async Task<ProjectResponse?> GetProjectByIdAsync(string projectId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<ProjectResponse>($"/api/projects/{projectId}");
    }

    public async Task<ProjectResponse?> CreateProjectAsync(CreateProjectRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PostAsync<CreateProjectRequest, ProjectResponse>("/api/projects", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!", $"–ü—Ä–æ–µ–∫—Ç \"{response.Name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
        }
        return response;
    }

    public async Task<ProjectResponse?> UpdateProjectAsync(string projectId, UpdateProjectRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PutAsync<UpdateProjectRequest, ProjectResponse>($"/api/projects/{projectId}", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!", $"–ü—Ä–æ–µ–∫—Ç \"{response.Name}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
        }
        return response;
    }

    public async Task<bool> DeleteProjectAsync(string projectId)
    {
        await SetAuthorizationHeaderAsync();
        var success = await DeleteAsync($"/api/projects/{projectId}");
        if (success)
        {
            _toastService.ShowSuccess("–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω!", "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
        }
        return success;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–Ω–±–∞–Ω –¥–æ—Å–∫–∏
    public async Task<List<ColumnResponse>> GetProjectColumnsAsync(string projectId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<List<ColumnResponse>>($"/api/kanban/projects/{projectId}/columns") ?? new List<ColumnResponse>();
    }

    public async Task<ColumnResponse?> CreateColumnAsync(CreateColumnRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PostAsync<CreateColumnRequest, ColumnResponse>("/api/kanban/columns", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", $"–ö–æ–ª–æ–Ω–∫–∞ \"{response.Title}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç");
        }
        return response;
    }

    public async Task<ColumnResponse?> UpdateColumnAsync(string columnId, UpdateColumnRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PutAsync<UpdateColumnRequest, ColumnResponse>($"/api/kanban/columns/{columnId}", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ö–æ–ª–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", $"–ö–æ–ª–æ–Ω–∫–∞ \"{response.Title}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        }
        return response;
    }

    public async Task<bool> DeleteColumnAsync(string columnId)
    {
        await SetAuthorizationHeaderAsync();
        var success = await DeleteAsync($"/api/kanban/columns/{columnId}");
        if (success)
        {
            _toastService.ShowSuccess("–ö–æ–ª–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", "–ö–æ–ª–æ–Ω–∫–∞ –∏ –≤—Å–µ –µ—ë –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã");
        }
        return success;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–¥–∞—á
    public async Task<List<TaskResponse>> GetColumnTasksAsync(string columnId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<List<TaskResponse>>($"/api/kanban/columns/{columnId}/tasks") ?? new List<TaskResponse>();
    }

    public async Task<TaskResponse?> GetTaskByIdAsync(string taskId)
    {
        await SetAuthorizationHeaderAsync();
        return await GetAsync<TaskResponse>($"/api/kanban/tasks/{taskId}");
    }

    public async Task<TaskResponse?> CreateTaskAsync(CreateTaskRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PostAsync<CreateTaskRequest, TaskResponse>("/api/kanban/tasks", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!", $"–ó–∞–¥–∞—á–∞ \"{response.Title}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç");
        }
        return response;
    }

    public async Task<TaskResponse?> UpdateTaskAsync(string taskId, UpdateTaskRequest request)
    {
        await SetAuthorizationHeaderAsync();
        var response = await PutAsync<UpdateTaskRequest, TaskResponse>($"/api/kanban/tasks/{taskId}", request);
        if (response != null)
        {
            _toastService.ShowSuccess("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", $"–ó–∞–¥–∞—á–∞ \"{response.Title}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        }
        return response;
    }

    public async Task<bool> DeleteTaskAsync(string taskId)
    {
        await SetAuthorizationHeaderAsync();
        var success = await DeleteAsync($"/api/kanban/tasks/{taskId}");
        if (success)
        {
            _toastService.ShowSuccess("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
        }
        return success;
    }

    public async Task<TaskResponse?> MoveTaskAsync(string taskId, MoveTaskRequest request)
    {
        await SetAuthorizationHeaderAsync();
        
        var endpoint = $"/api/kanban/tasks/{taskId}/move";
        Console.WriteLine($"üåê API CLIENT: –û—Ç–ø—Ä–∞–≤–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {endpoint}");
        Console.WriteLine($"üì¶ API CLIENT: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ - NewColumnId: {request.NewColumnId}, NewOrder: {request.NewOrder}");
        
        var result = await PutAsync<MoveTaskRequest, TaskResponse>(endpoint, request);
        
        if (result != null)
        {
            Console.WriteLine($"‚úÖ API CLIENT: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - TaskId: {result.Id}, ColumnId: {result.ColumnId}");
            _toastService.ShowSuccess("–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞!", $"–ó–∞–¥–∞—á–∞ \"{result.Title}\" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞");
        }
        else
        {
            Console.WriteLine($"‚ùå API CLIENT: –ü–æ–ª—É—á–µ–Ω null –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
        
        return result;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private async Task<T?> GetAsync<T>(string endpoint)
    {
        try
        {
            var response = await _httpClient.GetAsync(endpoint);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<T>(json, _jsonOptions);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _toastService.ShowError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", $"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.StatusCode}");
                Console.WriteLine($"GET {endpoint} failed: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            Console.WriteLine($"Error in GET {endpoint}: {ex.Message}");
        }
        return default;
    }

    private async Task<TResponse?> PostAsync<TRequest, TResponse>(string endpoint, TRequest data)
    {
        try
        {
            var json = JsonSerializer.Serialize(data, _jsonOptions);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await _httpClient.PostAsync(endpoint, content);
            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<TResponse>(responseJson, _jsonOptions);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è", $"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.StatusCode}");
                Console.WriteLine($"POST {endpoint} failed: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            Console.WriteLine($"Error in POST {endpoint}: {ex.Message}");
        }
        return default;
    }

    private async Task<TResponse?> PutAsync<TRequest, TResponse>(string endpoint, TRequest data)
    {
        try
        {
            var json = JsonSerializer.Serialize(data, _jsonOptions);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await _httpClient.PutAsync(endpoint, content);
            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<TResponse>(responseJson, _jsonOptions);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _toastService.ShowError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", $"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.StatusCode}");
                Console.WriteLine($"PUT {endpoint} failed: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            Console.WriteLine($"Error in PUT {endpoint}: {ex.Message}");
        }
        return default;
    }

    private async Task<bool> DeleteAsync(string endpoint)
    {
        try
        {
            var response = await _httpClient.DeleteAsync(endpoint);
            if (response.IsSuccessStatusCode)
            {
                return true;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _toastService.ShowError("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", $"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.StatusCode}");
                Console.WriteLine($"DELETE {endpoint} failed: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            Console.WriteLine($"Error in DELETE {endpoint}: {ex.Message}");
        }
        return false;
    }

    private async Task SetAuthenticationHeaderAsync(string token)
    {
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
        await _localStorage.SetAuthTokenAsync(token);
    }

    private async Task SetAuthorizationHeaderAsync()
    {
        var userData = await _localStorage.GetUserDataAsync();
        if (userData.IsAuthenticated && !string.IsNullOrEmpty(userData.Token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userData.Token);
        }
    }
} 
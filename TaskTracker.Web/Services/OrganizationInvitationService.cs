using TaskTracker.Models.DTOs;
using TaskTracker.Models;

namespace TaskTracker.Web.Services;

public class OrganizationInvitationService
{
    private readonly IApiService _apiService;
    private readonly IToastService _toastService;
    private readonly ILogger<OrganizationInvitationService> _logger;

    // –ö—ç—à –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    private readonly Dictionary<string, List<OrganizationMemberResponse>> _membersCache = new();
    private readonly Dictionary<string, List<InvitationResponse>> _invitationsCache = new();

    public OrganizationInvitationService(
        IApiService apiService, 
        IToastService toastService,
        ILogger<OrganizationInvitationService> logger)
    {
        _apiService = apiService;
        _toastService = toastService;
        _logger = logger;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    /// </summary>
    public async Task<List<OrganizationMemberResponse>> GetOrganizationMembersAsync(string organizationId, bool forceRefresh = false)
    {
        try
        {
            if (!forceRefresh && _membersCache.ContainsKey(organizationId))
            {
                _logger.LogInformation($"üë• –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫—ç—à–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organizationId}");
                return _membersCache[organizationId];
            }

            _logger.LogInformation($"üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organizationId}");
            var members = await _apiService.GetOrganizationMembersAsync(organizationId);
            
            _membersCache[organizationId] = members;
            return members;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organizationId}");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
            return new List<OrganizationMemberResponse>();
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    /// </summary>
    public async Task<List<InvitationResponse>> GetOrganizationInvitationsAsync(string organizationId, bool forceRefresh = false)
    {
        try
        {
            if (!forceRefresh && _invitationsCache.ContainsKey(organizationId))
            {
                _logger.LogInformation($"üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organizationId}");
                return _invitationsCache[organizationId];
            }

            _logger.LogInformation($"üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organizationId}");
            var invitations = await _apiService.GetOrganizationInvitationsAsync(organizationId);
            
            _invitationsCache[organizationId] = invitations;
            return invitations;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organizationId}");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π");
            return new List<InvitationResponse>();
        }
    }

    /// <summary>
    /// –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    /// </summary>
    public async Task<InvitationResponse?> InviteUserAsync(string organizationId, InviteUserRequest request)
    {
        try
        {
            _logger.LogInformation($"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {request.Email} –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é {organizationId}");
            
            var invitation = await _apiService.InviteUserAsync(organizationId, request);
            
            if (invitation != null)
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                InvalidateInvitationsCache(organizationId);
                _logger.LogInformation($"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {invitation.Id}");
            }
            
            return invitation;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {request.Email}");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", ex.Message);
            return null;
        }
    }

    /// <summary>
    /// –û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    /// </summary>
    public async Task<bool> RevokeInvitationAsync(string invitationId, string organizationId)
    {
        try
        {
            _logger.LogInformation($"üö´ –û—Ç–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitationId}");
            
            var success = await _apiService.RevokeInvitationAsync(invitationId);
            
            if (success)
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                InvalidateInvitationsCache(organizationId);
                _logger.LogInformation($"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitationId} –æ—Ç–æ–∑–≤–∞–Ω–æ");
            }
            
            return success;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {invitationId}");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ");
            return false;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É
    /// </summary>
    public async Task<InvitationInfoResponse?> GetInvitationInfoAsync(string token)
    {
        try
        {
            _logger.LogInformation($"üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ {token}");
            
            var invitation = await _apiService.GetInvitationInfoAsync(token);
            return invitation;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ {token}");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏");
            return null;
        }
    }

    /// <summary>
    /// –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    /// </summary>
    public async Task<AcceptInvitationResponse?> AcceptInvitationAsync(AcceptInvitationRequest request)
    {
        try
        {
            _logger.LogInformation($"‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {request.Token}");
            
            var result = await _apiService.AcceptInvitationAsync(request);
            
            if (result?.Success == true)
            {
                // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∏
                ClearAllCache();
                _logger.LogInformation($"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {request.Token} –ø—Ä–∏–Ω—è—Ç–æ");
            }
            
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {request.Token}");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è", ex.Message);
            return null;
        }
    }

    /// <summary>
    /// –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    /// </summary>
    public async Task<bool> DeclineInvitationAsync(string token)
    {
        try
        {
            _logger.LogInformation($"‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {token}");
            
            var request = new DeclineInvitationRequest { Token = token };
            var success = await _apiService.DeclineInvitationAsync(request);
            
            if (success)
            {
                _logger.LogInformation($"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {token} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ");
            }
            
            return success;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {token}");
            _toastService.ShowError("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ");
            return false;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ email –≤–∞–ª–∏–¥–Ω—ã–º
    /// </summary>
    public bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;

        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
    /// </summary>
    public string GetRoleDisplayName(OrganizationRole role)
    {
        return role switch
        {
            OrganizationRole.Owner => "–í–ª–∞–¥–µ–ª–µ—Ü",
            OrganizationRole.Admin => "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
            OrganizationRole.Member => "–£—á–∞—Å—Ç–Ω–∏–∫",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    /// </summary>
    public string GetInvitationStatusDisplayName(InvitationStatus status)
    {
        return status switch
        {
            InvitationStatus.Pending => "–û–∂–∏–¥–∞–µ—Ç",
            InvitationStatus.Accepted => "–ü—Ä–∏–Ω—è—Ç–æ",
            InvitationStatus.Declined => "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            InvitationStatus.Expired => "–ò—Å—Ç–µ–∫–ª–æ",
            InvitationStatus.Revoked => "–û—Ç–æ–∑–≤–∞–Ω–æ",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å CSS –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    /// </summary>
    public string GetInvitationStatusCssClass(InvitationStatus status)
    {
        return status switch
        {
            InvitationStatus.Pending => "bg-yellow-100 text-yellow-800",
            InvitationStatus.Accepted => "bg-green-100 text-green-800",
            InvitationStatus.Declined => "bg-red-100 text-red-800",
            InvitationStatus.Expired => "bg-gray-100 text-gray-800",
            InvitationStatus.Revoked => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    /// </summary>
    public void InvalidateMembersCache(string organizationId)
    {
        if (_membersCache.ContainsKey(organizationId))
        {
            _membersCache.Remove(organizationId);
            _logger.LogInformation($"üóëÔ∏è –ö—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organizationId} –æ—á–∏—â–µ–Ω");
        }
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    /// </summary>
    public void InvalidateInvitationsCache(string organizationId)
    {
        if (_invitationsCache.ContainsKey(organizationId))
        {
            _invitationsCache.Remove(organizationId);
            _logger.LogInformation($"üóëÔ∏è –ö—ç—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organizationId} –æ—á–∏—â–µ–Ω");
        }
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
    /// </summary>
    public void ClearAllCache()
    {
        _membersCache.Clear();
        _invitationsCache.Clear();
        _logger.LogInformation($"üóëÔ∏è –í–µ—Å—å –∫—ç—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –æ—á–∏—â–µ–Ω");
    }
} 
using TaskTracker.Models;
using TaskTracker.Models.DTOs;

namespace TaskTracker.Web.Services;

public class OrganizationService
{
    private readonly IApiService _apiService;
    private readonly ILogger<OrganizationService> _logger;

    public OrganizationService(IApiService apiService, ILogger<OrganizationService> logger)
    {
        _apiService = apiService;
        _logger = logger;
    }

    public async Task<List<Organization>> GetUserOrganizationsAsync()
    {
        try
        {
            _logger.LogInformation("üè¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
            
            var organizations = await _apiService.GetUserOrganizationsAsync();
            
            if (organizations == null)
            {
                _logger.LogWarning("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª null –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π");
                return new List<Organization>();
            }

            var result = organizations.Select(org => new Organization
            {
                Id = org.Id,
                Name = org.Name,
                Description = org.Description,
                Icon = org.Icon,
                Color = org.Color,
                Members = org.Members,
                OwnerId = org.OwnerId,
                ProjectCount = org.ProjectCount,
                CreatedDate = org.CreatedDate
            }).ToList();

            _logger.LogInformation($"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {result.Count} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π");
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π");
            return new List<Organization>();
        }
    }

    public async Task<Organization?> CreateOrganizationAsync(CreateOrganizationRequest request)
    {
        try
        {
            _logger.LogInformation($"üèóÔ∏è –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {request.Name}");
            
            var response = await _apiService.CreateOrganizationAsync(request);
            
            if (response == null)
            {
                _logger.LogWarning("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª null –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏");
                return null;
            }

            var organization = new Organization
            {
                Id = response.Id,
                Name = response.Name,
                Description = response.Description,
                Icon = response.Icon,
                Color = response.Color,
                Members = response.Members,
                OwnerId = response.OwnerId,
                ProjectCount = response.ProjectCount,
                CreatedDate = response.CreatedDate
            };

            _logger.LogInformation($"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {organization.Name} (ID: {organization.Id})");
            return organization;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {request.Name}");
            return null;
        }
    }

    public async Task<Organization?> UpdateOrganizationAsync(string organizationId, UpdateOrganizationRequest request)
    {
        try
        {
            _logger.LogInformation($"üìù –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {organizationId}");
            
            var response = await _apiService.UpdateOrganizationAsync(organizationId, request);
            
            if (response == null)
            {
                _logger.LogWarning("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª null –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏");
                return null;
            }

            var organization = new Organization
            {
                Id = response.Id,
                Name = response.Name,
                Description = response.Description,
                Icon = response.Icon,
                Color = response.Color,
                Members = response.Members,
                OwnerId = response.OwnerId,
                ProjectCount = response.ProjectCount,
                CreatedDate = response.CreatedDate
            };

            _logger.LogInformation($"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {organization.Name}");
            return organization;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {organizationId}");
            return null;
        }
    }

    public async Task<bool> DeleteOrganizationAsync(string organizationId)
    {
        try
        {
            _logger.LogInformation($"üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {organizationId}");
            
            var success = await _apiService.DeleteOrganizationAsync(organizationId);
            
            if (success)
            {
                _logger.LogInformation($"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞: {organizationId}");
            }
            else
            {
                _logger.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {organizationId}");
            }

            return success;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {organizationId}");
            return false;
        }
    }
} 
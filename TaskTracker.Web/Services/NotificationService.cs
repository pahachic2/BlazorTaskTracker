using System.Text.Json;
using TaskTracker.Web.Models;
using TaskTracker.Models.DTOs;
using TaskTracker.Models;

namespace TaskTracker.Web.Services;

public class NotificationService : INotificationService
{
    private readonly ILocalStorageService _localStorage;
    private readonly IApiService _apiService;
    private readonly OrganizationInvitationService _invitationService;
    private readonly IToastService _toastService;
    private readonly string _storageKey = "user_notifications";
    
    private List<NotificationItem> _notifications = new();
    
    public event Action? NotificationsChanged;

    public NotificationService(
        ILocalStorageService localStorage,
        IApiService apiService,
        OrganizationInvitationService invitationService,
        IToastService toastService)
    {
        _localStorage = localStorage;
        _apiService = apiService;
        _invitationService = invitationService;
        _toastService = toastService;
    }

    public Task<List<NotificationItem>> GetNotificationsAsync()
    {
        Console.WriteLine("üîî NOTIFICATIONS: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
        Console.WriteLine($"üîî NOTIFICATIONS: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏: {_notifications.Count}");
        
        // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ
        var sortedNotifications = _notifications.OrderByDescending(n => n.CreatedAt).ToList();
        Console.WriteLine($"üîî NOTIFICATIONS: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {sortedNotifications.Count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
        return Task.FromResult(sortedNotifications);
    }

    public async Task RefreshNotificationsAsync()
    {
        Console.WriteLine("üîî NOTIFICATIONS: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
        
        try
        {
            Console.WriteLine("üîî NOTIFICATIONS: –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ LocalStorage");
            await LoadNotificationsFromStorageAsync();
            Console.WriteLine($"üîî NOTIFICATIONS: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ storage: {_notifications.Count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");

            Console.WriteLine("üîî NOTIFICATIONS: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞");
            await LoadInvitationNotificationsAsync();
            Console.WriteLine($"üîî NOTIFICATIONS: –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {_notifications.Count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");

            foreach (var notification in _notifications)
            {
                Console.WriteLine($"üîî NOTIFICATIONS: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ID={notification.Id}, Type={notification.Type}, Title={notification.Title}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {ex.Message}");
            _notifications = new List<NotificationItem>();
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        _notifications = _notifications.OrderByDescending(n => n.CreatedAt).ToList();
        
        Console.WriteLine($"üîî NOTIFICATIONS: –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {_notifications.Count}");
        NotificationsChanged?.Invoke();
    }

    public async Task MarkAsReadAsync(string notificationId)
    {
        var notification = _notifications.FirstOrDefault(n => n.Id == notificationId);
        if (notification != null)
        {
            notification.IsRead = true;
            await SaveNotificationsToStorageAsync();
            NotificationsChanged?.Invoke();
        }
    }

    public async Task MarkAllAsReadAsync()
    {
        foreach (var notification in _notifications)
        {
            notification.IsRead = true;
        }
        await SaveNotificationsToStorageAsync();
        NotificationsChanged?.Invoke();
    }

    public async Task DeleteNotificationAsync(string notificationId)
    {
        _notifications.RemoveAll(n => n.Id == notificationId);
        await SaveNotificationsToStorageAsync();
        NotificationsChanged?.Invoke();
    }

    public async Task<int> GetUnreadCountAsync()
    {
        await LoadNotificationsFromStorageAsync();
        await LoadInvitationNotificationsAsync();
        return _notifications.Count(n => !n.IsRead);
    }

    public async Task AddInvitationNotificationAsync(InvitationResponse invitation)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        var existingNotification = _notifications.FirstOrDefault(n => 
            n.Type == NotificationType.Invitation && 
            n.Data.ContainsKey("InvitationId") && 
            n.Data["InvitationId"].ToString() == invitation.Id);

        if (existingNotification == null)
        {
            var notification = new NotificationItem
            {
                Title = "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é",
                Message = $"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é \"{invitation.OrganizationName}\" –≤ —Ä–æ–ª–∏ {GetRoleDisplayName(invitation.Role)}",
                Type = NotificationType.Invitation,
                CreatedAt = invitation.CreatedAt,
                IsRead = false,
                ActionText = "–ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                Data = new Dictionary<string, object>
                {
                    ["InvitationId"] = invitation.Id,
                    ["Token"] = invitation.Token,
                    ["OrganizationId"] = invitation.OrganizationId,
                    ["OrganizationName"] = invitation.OrganizationName,
                    ["InvitedByName"] = invitation.InvitedByName,
                    ["Role"] = invitation.Role.ToString(),
                    ["ExpiresAt"] = invitation.ExpiresAt
                }
            };

            _notifications.Add(notification);
            await SaveNotificationsToStorageAsync();
            NotificationsChanged?.Invoke();
        }
    }

    public async Task<bool> AcceptInvitationFromNotificationAsync(string notificationId)
    {
        Console.WriteLine($"üîî NOTIFICATIONS: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notificationId}");
        Console.WriteLine($"üîî NOTIFICATIONS: –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ: {_notifications.Count}");
        
        foreach (var n in _notifications)
        {
            Console.WriteLine($"üîî NOTIFICATIONS: ID: {n.Id}, Type: {n.Type}, HasToken: {n.Data.ContainsKey("Token")}");
        }
        
        var notification = _notifications.FirstOrDefault(n => n.Id == notificationId);
        if (notification?.Type != NotificationType.Invitation || !notification.Data.ContainsKey("Token"))
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º. Notification: {notification != null}, Type: {notification?.Type}, HasToken: {notification?.Data.ContainsKey("Token")}");
            return false;
        }

        try
        {
            var token = notification.Data["Token"].ToString()!;
            Console.WriteLine($"üîî NOTIFICATIONS: –ò–∑–≤–ª–µ–∫–ª–∏ —Ç–æ–∫–µ–Ω: {token[..10]}...");
            
            var request = new AcceptInvitationRequest { Token = token };
            Console.WriteLine($"üîî NOTIFICATIONS: –°–æ–∑–¥–∞–ª–∏ –∑–∞–ø—Ä–æ—Å, –≤—ã–∑—ã–≤–∞–µ–º _invitationService.AcceptInvitationAsync");
            
            var result = await _invitationService.AcceptInvitationAsync(request);
            Console.WriteLine($"üîî NOTIFICATIONS: –ü–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç invitation service: Success={result?.Success}, Message={result?.Message}");

            if (result?.Success == true)
            {
                Console.WriteLine($"üîî NOTIFICATIONS: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ —É—Å–ø–µ—à–Ω–æ, —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
                // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è
                await DeleteNotificationAsync(notificationId);
                _toastService.ShowSuccess("–£—Å–ø–µ—Ö", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.");
                return true;
            }
            else
            {
                Console.WriteLine($"‚ùå NOTIFICATIONS: –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result?.Message}");
                _toastService.ShowError("–û—à–∏–±–∫–∞", result?.Message ?? "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {ex.Message}");
            Console.WriteLine($"‚ùå NOTIFICATIONS: Stack trace: {ex.StackTrace}");
            _toastService.ShowError("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è");
            return false;
        }
    }

    public async Task<bool> DeclineInvitationFromNotificationAsync(string notificationId)
    {
        var notification = _notifications.FirstOrDefault(n => n.Id == notificationId);
        if (notification?.Type != NotificationType.Invitation || !notification.Data.ContainsKey("Token"))
            return false;

        try
        {
            var token = notification.Data["Token"].ToString()!;
            var success = await _invitationService.DeclineInvitationAsync(token);

            if (success)
            {
                // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                await DeleteNotificationAsync(notificationId);
                _toastService.ShowInfo("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ");
                return true;
            }
            else
            {
                _toastService.ShowError("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {ex.Message}");
            _toastService.ShowError("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è");
            return false;
        }
    }

    private async Task LoadNotificationsFromStorageAsync()
    {
        try
        {
            var storedJson = await _localStorage.GetItemAsync(_storageKey);
            if (!string.IsNullOrEmpty(storedJson))
            {
                var stored = JsonSerializer.Deserialize<List<NotificationItem>>(storedJson);
                if (stored != null)
                {
                    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
                    var cutoffDate = DateTime.UtcNow.AddDays(-30);
                    _notifications = stored.Where(n => n.CreatedAt > cutoffDate).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage: {ex.Message}");
            _notifications = new List<NotificationItem>();
        }
    }

    private async Task SaveNotificationsToStorageAsync()
    {
        try
        {
            var json = JsonSerializer.Serialize(_notifications);
            await _localStorage.SetItemAsync(_storageKey, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage: {ex.Message}");
        }
    }

    private async Task LoadInvitationNotificationsAsync()
    {
        try
        {
            var invitations = await _apiService.GetUserInvitationsAsync();
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö
            _notifications.RemoveAll(n => n.Type == NotificationType.Invitation);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            foreach (var invitation in invitations)
            {
                await AddInvitationNotificationAsync(invitation);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {ex.Message}");
        }
    }

    private string GetRoleDisplayName(OrganizationRole role)
    {
        return role switch
        {
            OrganizationRole.Owner => "–í–ª–∞–¥–µ–ª–µ—Ü",
            OrganizationRole.Admin => "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            OrganizationRole.Member => "–£—á–∞—Å—Ç–Ω–∏–∫",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"
        };
    }

    // –¢–ï–°–¢–û–í–´–ï –ú–ï–¢–û–î–´ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    public async Task AddTestNotificationsAsync()
    {
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        var infoNotification = new NotificationItem
        {
            Title = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            Message = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.",
            Type = NotificationType.Info,
            CreatedAt = DateTime.UtcNow,
            IsRead = false
        };

        // –£—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        var successNotification = new NotificationItem
        {
            Title = "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
            Message = "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            Type = NotificationType.Success,
            CreatedAt = DateTime.UtcNow.AddMinutes(-5),
            IsRead = false
        };

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        var errorNotification = new NotificationItem
        {
            Title = "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
            Message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            Type = NotificationType.Error,
            CreatedAt = DateTime.UtcNow.AddHours(-1),
            IsRead = true
        };

        _notifications.AddRange(new[] { infoNotification, successNotification, errorNotification });
        await SaveNotificationsToStorageAsync();
        NotificationsChanged?.Invoke();
    }

    public async Task AddTestInvitationNotificationAsync(NotificationItem invitation)
    {
        Console.WriteLine($"üîî NOTIFICATIONS: –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {invitation.Title}");
        Console.WriteLine($"üîî NOTIFICATIONS: ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invitation.Id}");
        Console.WriteLine($"üîî NOTIFICATIONS: –¢–∏–ø: {invitation.Type}");
        Console.WriteLine($"üîî NOTIFICATIONS: –î–∞–Ω–Ω—ã–µ: {string.Join(", ", invitation.Data.Keys)}");
        
        _notifications.Add(invitation);
        await SaveNotificationsToStorageAsync();
        NotificationsChanged?.Invoke();
        Console.WriteLine($"üîî NOTIFICATIONS: –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –≤—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {_notifications.Count}");
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        var addedNotification = _notifications.FirstOrDefault(n => n.Id == invitation.Id);
        Console.WriteLine($"üîî NOTIFICATIONS: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {addedNotification != null}");
    }
} 
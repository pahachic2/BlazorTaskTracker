@using TaskTracker.Models
@using TaskTracker.Models.DTOs
@using TaskTracker.Web.Components.Modals
@inject OrganizationInvitationService InvitationService

@* Модальное окно приглашения пользователя *@

@if (IsVisible)
{
    <div class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <!-- Фон затемнения -->
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <!-- Фон затемнения -->
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @onclick="HandleClose"></div>

            <!-- Центрирование модального окна -->
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <!-- Модальное окно -->
            <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
                
                <!-- Заголовок -->
                <div class="sm:flex sm:items-start mb-6">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-2.25" />
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Пригласить пользователя
                        </h3>
                        <p class="mt-1 text-sm text-gray-500">
                            Отправьте приглашение для присоединения к организации
                        </p>
                    </div>
                </div>

                <!-- Форма -->
                <EditForm Model="@inviteModel" OnValidSubmit="@HandleSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="space-y-4">
                        <!-- Email -->
                        <div>
                            <label for="user-email" class="block text-sm font-medium text-gray-700 mb-1">
                                Email пользователя *
                            </label>
                            <InputText id="user-email" @bind-Value="inviteModel.Email" 
                                     class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                     placeholder="user@example.com" />
                            <ValidationMessage For="@(() => inviteModel.Email)" class="text-red-600 text-sm mt-1" />
                        </div>

                        <!-- Роль -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Роль в организации *
                            </label>
                            <div class="space-y-2">
                                @foreach (var role in availableRoles)
                                {
                                    <label class="flex items-center">
                                        <input type="radio" 
                                               name="role" 
                                               value="@role" 
                                               checked="@(inviteModel.Role == role)"
                                               @onchange="@(() => inviteModel.Role = role)"
                                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300" />
                                        <div class="ml-3">
                                            <span class="text-sm font-medium text-gray-700">@InvitationService.GetRoleDisplayName(role)</span>
                                            <p class="text-xs text-gray-500">@GetRoleDescription(role)</p>
                                        </div>
                                    </label>
                                }
                            </div>
                            <ValidationMessage For="@(() => inviteModel.Role)" class="text-red-600 text-sm mt-1" />
                        </div>

                        <!-- Сообщение (опционально) -->
                        <div>
                            <label for="invite-message" class="block text-sm font-medium text-gray-700 mb-1">
                                Сообщение (необязательно)
                            </label>
                            <InputTextArea id="invite-message" @bind-Value="inviteModel.Message" 
                                         class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 resize-none"
                                         rows="3"
                                         placeholder="Добавьте персональное сообщение к приглашению..." />
                            <ValidationMessage For="@(() => inviteModel.Message)" class="text-red-600 text-sm mt-1" />
                        </div>
                    </div>

                    <!-- Кнопки -->
                    <div class="mt-6 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                        <button type="submit" 
                                disabled="@isLoading"
                                class="w-full inline-flex justify-center items-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:col-start-2 sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed">
                            @if (isLoading)
                            {
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Отправка...</span>
                            }
                            else
                            {
                                <span>Отправить приглашение</span>
                            }
                        </button>
                        <button type="button" 
                                @onclick="HandleClose"
                                disabled="@isLoading"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:col-start-1 sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed">
                            Отменить
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string OrganizationId { get; set; } = "";
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<InvitationResponse> OnInvitationSent { get; set; }

    private InviteUserRequest inviteModel = new();
    private bool isLoading = false;

    private readonly OrganizationRole[] availableRoles = 
    {
        OrganizationRole.Member,
        OrganizationRole.Admin,
        OrganizationRole.Owner
    };

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            // Сбрасываем модель при открытии модального окна
            inviteModel = new InviteUserRequest
            {
                Role = OrganizationRole.Member
            };
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(inviteModel.Email) || string.IsNullOrWhiteSpace(OrganizationId))
        {
            return;
        }

        if (!InvitationService.IsValidEmail(inviteModel.Email))
        {
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var invitation = await InvitationService.InviteUserAsync(OrganizationId, inviteModel);
            
            if (invitation != null)
            {
                // Очищаем кеш участников для всех проектов (так как могут быть разные проекты в одной организации)
                TaskCreateModal.ClearMembersCache();
                
                await OnInvitationSent.InvokeAsync(invitation);
                await HandleClose();
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleClose()
    {
        if (!isLoading)
        {
            await OnClose.InvokeAsync();
        }
    }

    private string GetRoleDescription(OrganizationRole role)
    {
        return role switch
        {
            OrganizationRole.Owner => "Полный доступ к управлению организацией",
            OrganizationRole.Admin => "Управление проектами и участниками",
            OrganizationRole.Member => "Участие в проектах и задачах",
            _ => ""
        };
    }
} 
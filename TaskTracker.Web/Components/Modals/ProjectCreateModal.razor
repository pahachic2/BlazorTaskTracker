@using System.ComponentModel.DataAnnotations
@* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ *@

@if (IsVisible)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <!-- –ó–∞—Ç–µ–º–Ω–µ–Ω–Ω—ã–π —Ñ–æ–Ω -->
        <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity" @onclick="HandleClose"></div>
        
        <!-- –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ -->
        <div class="flex min-h-full items-center justify-center p-4">
            <div class="relative bg-white rounded-xl shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
                <div class="px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-gray-900">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</h3>
                        <button @onclick="HandleClose" 
                                class="text-gray-400 hover:text-gray-600 transition-colors">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>

                <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ä–º—ã -->
                <div class="px-6 py-4">
                    <EditForm Model="projectModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        
                        <!-- –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ -->
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ <span class="text-red-500">*</span>
                            </label>
                            <InputText @bind-Value="projectModel.Name" 
                                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                      placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" />
                            <ValidationMessage For="@(() => projectModel.Name)" class="text-red-500 text-xs mt-1" />
                        </div>

                        <!-- –û–ø–∏—Å–∞–Ω–∏–µ -->
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                –û–ø–∏—Å–∞–Ω–∏–µ
                            </label>
                            <InputTextArea @bind-Value="projectModel.Description" 
                                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                          placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" 
                                          rows="3" />
                        </div>

                        <!-- –í—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏ -->
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                –ò–∫–æ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
                            </label>
                            <div class="grid grid-cols-6 gap-2">
                                @foreach (var icon in availableIcons)
                                {
                                    <button type="button" 
                                            @onclick="@(() => projectModel.Icon = icon)"
                                            class="@GetIconButtonClasses(icon) w-10 h-10 rounded-lg flex items-center justify-center text-lg transition-colors">
                                        @icon
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                –¶–≤–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞
                            </label>
                            <div class="grid grid-cols-8 gap-2">
                                @foreach (var color in availableColors)
                                {
                                    <button type="button" 
                                            @onclick="@(() => projectModel.Color = color.Value)"
                                            class="@color.Value w-8 h-8 rounded-lg relative transition-transform hover:scale-110">
                                        @if (projectModel.Color == color.Value)
                                        {
                                            <div class="absolute inset-0 flex items-center justify-center">
                                                <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                                </svg>
                                            </div>
                                        }
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- –ö–Ω–æ–ø–∫–∏ -->
                        <div class="flex space-x-3">
                            <button type="button" 
                                    @onclick="HandleClose"
                                    class="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button type="submit" 
                                    disabled="@(!IsFormValid())"
                                    class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors">
                                –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Project> OnProjectCreated { get; set; }

    private ProjectCreateModel projectModel = new();
    
    private readonly List<string> availableIcons = new()
    {
        "üìã", "üöÄ", "üíº", "üéØ", "‚ö°", "üî•", "üí°", "üåü", "üé®", "üîß", "üì±", "üåê",
        "üìä", "üìà", "üèÜ", "üéÆ", "üéµ", "üìö", "üè†", "‚úàÔ∏è", "üöó", "üèÉ", "üé™", "üçï"
    };

    private readonly List<(string Name, string Value)> availableColors = new()
    {
        ("–°–∏–Ω–∏–π", "bg-blue-500"),
        ("–ó–µ–ª–µ–Ω—ã–π", "bg-green-500"),
        ("–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "bg-purple-500"),
        ("–†–æ–∑–æ–≤—ã–π", "bg-pink-500"),
        ("–ö—Ä–∞—Å–Ω—ã–π", "bg-red-500"),
        ("–ñ–µ–ª—Ç—ã–π", "bg-yellow-500"),
        ("–ò–Ω–¥–∏–≥–æ", "bg-indigo-500"),
        ("–ë–∏—Ä—é–∑–æ–≤—ã–π", "bg-teal-500")
    };

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
            projectModel = new ProjectCreateModel();
        }
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
    }

    private async Task HandleSubmit()
    {
        if (IsFormValid())
        {
            var newProject = new Project
            {
                Id = Guid.NewGuid().ToString(),
                Name = projectModel.Name,
                Description = projectModel.Description ?? "",
                Icon = projectModel.Icon,
                Color = projectModel.Color,
                CreatedDate = DateTime.Now,
                Members = new List<string> { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞" }, // –°–æ–∑–¥–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
                TaskCount = 0,
                IsActive = true
            };

            Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {newProject.Name}");
            await OnProjectCreated.InvokeAsync(newProject);
            await HandleClose();
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(projectModel.Name);
    }

    private string GetIconButtonClasses(string icon)
    {
        if (projectModel.Icon == icon)
        {
            return "bg-blue-100 border-2 border-blue-500";
        }
        return "bg-gray-50 border border-gray-200 hover:bg-gray-100";
    }

    public class ProjectCreateModel
    {
        [Required(ErrorMessage = "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")]
        [StringLength(100, ErrorMessage = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")]
        public string Name { get; set; } = "";
        
        [StringLength(500, ErrorMessage = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤")]
        public string? Description { get; set; }
        
        public string Icon { get; set; } = "üìã";
        public string Color { get; set; } = "bg-blue-500";
    }
} 
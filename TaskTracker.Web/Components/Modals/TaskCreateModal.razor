@* Модальное окно для создания новой задачи *@
@using TaskTracker.Models
@using TaskTracker.Models.DTOs
@using Microsoft.AspNetCore.Components.Web
@inject IApiService ApiService

@if (IsVisible)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" @onclick="CloseModal">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-screen overflow-y-auto" @onclick:stopPropagation="true">
            <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                <!-- Заголовок модального окна -->
                <div class="flex justify-between items-center p-6 border-b border-gray-200">
                    <h2 class="text-xl font-semibold text-gray-900">Создать новую задачу</h2>
                    <button type="button" @onclick="CloseModal" class="text-gray-400 hover:text-gray-600 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>

                <!-- Содержимое модального окна -->
                <div class="p-6 space-y-4">
                    <!-- Название задачи -->
                    <div>
                        <label for="taskTitle" class="block text-sm font-medium text-gray-700 mb-2">
                            Название задачи <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="taskTitle" @bind="newTask.Title" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                               placeholder="Введите название задачи..." />
                    </div>

                    <!-- Описание задачи -->
                    <div>
                        <label for="taskDescription" class="block text-sm font-medium text-gray-700 mb-2">
                            Описание
                        </label>
                        <textarea id="taskDescription" @bind="newTask.Description" rows="3"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                                  placeholder="Описание задачи (необязательно)..."></textarea>
                    </div>

                    <!-- Теги -->
                    <div>
                        <label for="taskTags" class="block text-sm font-medium text-gray-700 mb-2">
                            Теги
                        </label>
                        <div class="flex flex-wrap gap-2 mb-2">
                            @foreach (var tag in newTask.Tags)
                            {
                                <span class="@GetTagClasses(tag) px-2 py-1 rounded text-xs font-medium flex items-center">
                                    @tag
                                    <button type="button" @onclick="@(() => RemoveTag(tag))" class="ml-1 text-xs">×</button>
                                </span>
                            }
                        </div>
                        <div class="flex">
                            <input type="text" @bind="newTagInput" @onkeypress="HandleTagKeyPress"
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                   placeholder="Добавить тег..." />
                            <button type="button" @onclick="AddTag"
                                    class="px-4 py-2 bg-gray-100 border border-l-0 border-gray-300 rounded-r-lg hover:bg-gray-200 transition-colors">
                                +
                            </button>
                        </div>
                        <div class="flex flex-wrap gap-1 mt-2">
                            @foreach (var presetTag in PresetTags)
                            {
                                <button type="button" @onclick="@(() => AddPresetTag(presetTag))"
                                        class="text-xs px-2 py-1 border border-gray-300 rounded hover:bg-gray-50 transition-colors">
                                    @presetTag
                                </button>
                            }
                        </div>
                    </div>

                    <!-- Исполнители -->
                    <div>
                        <label for="taskAssignees" class="block text-sm font-medium text-gray-700 mb-2">
                            Исполнители
                        </label>
                        <div class="flex flex-wrap gap-2 mb-2">
                            @foreach (var assigneeId in newTask.AssigneeIds)
                            {
                                var member = availableMembers.FirstOrDefault(m => m.UserId == assigneeId);
                                if (member != null)
                                {
                                    <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-medium flex items-center">
                                        @member.Username
                                        <button type="button" @onclick="@(() => RemoveAssigneeById(assigneeId))" class="ml-1 text-xs">×</button>
                                    </span>
                                }
                            }
                        </div>
                        <div class="flex">
                            <input type="text" @bind="newAssigneeInput" @onkeypress="HandleAssigneeKeyPress" @oninput="HandleAssigneeInput"
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                   placeholder="Введите имя или email исполнителя..." />
                            <button type="button" @onclick="AddAssignee"
                                    class="px-4 py-2 bg-gray-100 border border-l-0 border-gray-300 rounded-r-lg hover:bg-gray-200 transition-colors">
                                +
                            </button>
                        </div>
                        
                        <!-- Автодополнение -->
                        @if (filteredMembers.Any() && !string.IsNullOrWhiteSpace(newAssigneeInput))
                        {
                            <div class="mt-1 border border-gray-200 rounded-lg bg-white shadow-sm max-h-32 overflow-y-auto">
                                @foreach (var member in filteredMembers.Take(5))
                                {
                                    <button type="button" @onclick="@(() => SelectMember(member))"
                                            class="w-full px-3 py-2 text-left hover:bg-gray-50 transition-colors flex items-center space-x-2">
                                        <div class="w-6 h-6 rounded-full bg-blue-500 flex items-center justify-center text-white text-xs font-medium">
                                            @member.Username.Substring(0, 1).ToUpper()
                                        </div>
                                        <div>
                                            <div class="text-sm font-medium text-gray-900">@member.Username</div>
                                            <div class="text-xs text-gray-500">@member.Email</div>
                                        </div>
                                    </button>
                                }
                            </div>
                        }

                        <!-- Информация о доступных участниках -->
                        @if (availableMembers.Any())
                        {
                            <div class="mt-2 text-xs text-gray-500">
                                Доступно участников: @availableMembers.Count
                            </div>
                        }
                        else
                        {
                            <div class="mt-2 text-xs text-orange-600">
                                В организации нет участников для назначения
                            </div>
                        }
                    </div>

                    <!-- Дата выполнения -->
                    <div>
                        <label for="taskDueDate" class="block text-sm font-medium text-gray-700 mb-2">
                            Дата выполнения
                        </label>
                        <input type="date" id="taskDueDate" @bind="dueDate" @bind:format="yyyy-MM-dd"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>
                </div>

                <!-- Кнопки действий -->
                <div class="flex justify-end space-x-3 p-6 border-t border-gray-200 bg-gray-50 rounded-b-lg">
                    <button type="button" @onclick="CloseModal"
                            class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Отмена
                    </button>
                    <button type="submit" disabled="@(!IsFormValid)"
                            class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors">
                        Создать задачу
                    </button>
                </div>
            </form>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string? ProjectId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<KanbanTask> OnTaskCreated { get; set; }

    private KanbanTask newTask = new();
    private string newTagInput = "";
    private string newAssigneeInput = "";
    private DateTime? dueDate;

    // Данные об участниках организации
    private List<OrganizationMemberResponse> availableMembers = new();
    private List<OrganizationMemberResponse> filteredMembers = new();
    private static readonly Dictionary<string, List<OrganizationMemberResponse>> _membersCache = new();

    private readonly List<string> PresetTags = new() { "Frontend", "Backend", "Bug", "Feature", "Urgent", "Design", "Testing", "DevOps", "Documentation" };

    private bool IsFormValid => !string.IsNullOrWhiteSpace(newTask.Title);

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && !string.IsNullOrEmpty(ProjectId))
        {
            ResetForm();
            await LoadOrganizationMembers();
        }
    }

    private void ResetForm()
    {
        newTask = new KanbanTask
        {
            Id = Guid.NewGuid().ToString(),
            Tags = new List<string>(),
            Assignees = new List<string>(),
            AssigneeIds = new List<string>()
        };
        newTagInput = "";
        newAssigneeInput = "";
        dueDate = null;
        filteredMembers.Clear();
    }

    private async Task LoadOrganizationMembers()
    {
        if (string.IsNullOrEmpty(ProjectId)) return;

        try
        {
            Console.WriteLine($"TaskCreateModal: Загрузка участников для проекта {ProjectId}");

            // Проверяем кеш
            if (_membersCache.ContainsKey(ProjectId))
            {
                availableMembers = _membersCache[ProjectId];
                Console.WriteLine($"TaskCreateModal: Используем кешированных участников ({availableMembers.Count})");
                StateHasChanged();
                return;
            }

            // Получаем информацию о проекте чтобы найти организацию
            var projects = await ApiService.GetUserProjectsAsync();
            var project = projects.FirstOrDefault(p => p.Id == ProjectId);
            
            if (project?.OrganizationId != null)
            {
                availableMembers = await ApiService.GetOrganizationMembersAsync(project.OrganizationId);
                
                // Кешируем результат
                _membersCache[ProjectId] = availableMembers;
                
                Console.WriteLine($"TaskCreateModal: Загружено {availableMembers.Count} участников организации");
            }
            else
            {
                Console.WriteLine($"TaskCreateModal: Не удалось найти организацию для проекта {ProjectId}");
                availableMembers = new List<OrganizationMemberResponse>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"TaskCreateModal: Ошибка загрузки участников: {ex.Message}");
            availableMembers = new List<OrganizationMemberResponse>();
        }
        
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private async Task HandleSubmit()
    {
        if (!IsFormValid) return;

        // Устанавливаем дату выполнения, если она указана
        if (dueDate.HasValue)
        {
            newTask.DueDate = dueDate.Value;
        }

        // Заполняем имена исполнителей для совместимости
        newTask.Assignees = GetAssigneeNames();

        newTask.ColumnId = "todo"; // Всегда добавляем в первую колонку

        Console.WriteLine($"TaskCreateModal: Создаем задачу с исполнителями: {string.Join(", ", newTask.AssigneeIds)}");

        await OnTaskCreated.InvokeAsync(newTask);
        await CloseModal();
    }

    // Методы для работы с тегами
    private void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(newTagInput) && !newTask.Tags.Contains(newTagInput.Trim()))
        {
            newTask.Tags.Add(newTagInput.Trim());
            newTagInput = "";
        }
    }

    private void AddPresetTag(string tag)
    {
        if (!newTask.Tags.Contains(tag))
        {
            newTask.Tags.Add(tag);
        }
    }

    private void RemoveTag(string tag)
    {
        newTask.Tags.Remove(tag);
    }

    private async Task HandleTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddTag();
        }
    }

    // Методы для работы с исполнителями
    private void AddAssignee()
    {
        if (string.IsNullOrWhiteSpace(newAssigneeInput)) return;

        // Ищем точное совпадение по имени или email
        var member = availableMembers.FirstOrDefault(m => 
            string.Equals(m.Username, newAssigneeInput.Trim(), StringComparison.OrdinalIgnoreCase) ||
            string.Equals(m.Email, newAssigneeInput.Trim(), StringComparison.OrdinalIgnoreCase));

        if (member != null && !newTask.AssigneeIds.Contains(member.UserId))
        {
            newTask.AssigneeIds.Add(member.UserId);
            newAssigneeInput = "";
            filteredMembers.Clear();
            StateHasChanged();
        }
    }

    private void SelectMember(OrganizationMemberResponse member)
    {
        if (!newTask.AssigneeIds.Contains(member.UserId))
        {
            newTask.AssigneeIds.Add(member.UserId);
            newAssigneeInput = "";
            filteredMembers.Clear();
            StateHasChanged();
        }
    }

    private void RemoveAssigneeById(string userId)
    {
        newTask.AssigneeIds.Remove(userId);
        StateHasChanged();
    }

    private void HandleAssigneeInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";
        newAssigneeInput = input;

        if (string.IsNullOrWhiteSpace(input))
        {
            filteredMembers.Clear();
        }
        else
        {
            // Фильтруем участников по имени или email
            filteredMembers = availableMembers
                .Where(m => !newTask.AssigneeIds.Contains(m.UserId) && 
                           (m.Username.Contains(input, StringComparison.OrdinalIgnoreCase) ||
                            m.Email.Contains(input, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }
        
        StateHasChanged();
    }

    private async Task HandleAssigneeKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (filteredMembers.Count == 1)
            {
                // Если есть один отфильтрованный результат - выбираем его
                SelectMember(filteredMembers.First());
            }
            else
            {
                AddAssignee();
            }
        }
        else if (e.Key == "Escape")
        {
            newAssigneeInput = "";
            filteredMembers.Clear();
            StateHasChanged();
        }
    }

    private List<string> GetAssigneeNames()
    {
        return newTask.AssigneeIds
            .Select(id => availableMembers.FirstOrDefault(m => m.UserId == id)?.Username)
            .Where(name => !string.IsNullOrEmpty(name))
            .Cast<string>()
            .ToList();
    }

    // Стили для тегов
    private string GetTagClasses(string tag)
    {
        return tag.ToLower() switch
        {
            "frontend" => "bg-blue-100 text-blue-800",
            "backend" => "bg-green-100 text-green-800",
            "bug" => "bg-red-100 text-red-800",
            "feature" => "bg-purple-100 text-purple-800",
            "urgent" => "bg-orange-100 text-orange-800",
            "design" => "bg-pink-100 text-pink-800",
            "testing" => "bg-yellow-100 text-yellow-800",
            "devops" => "bg-indigo-100 text-indigo-800",
            "documentation" => "bg-gray-100 text-gray-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    // Метод для очистки кеша (можно вызывать при добавлении новых пользователей)
    public static void ClearMembersCache(string? projectId = null)
    {
        if (projectId != null)
        {
            _membersCache.Remove(projectId);
        }
        else
        {
            _membersCache.Clear();
        }
    }
} 
} 
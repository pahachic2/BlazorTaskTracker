@using TaskTracker.Models.DTOs
@using System.ComponentModel.DataAnnotations

<div class="@(IsVisible ? "fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" : "hidden")" @onclick="HandleBackdropClick">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white" @onclick:stopPropagation="true">
        <div class="mt-3">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">üìã –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É</h3>
                <button @onclick="HandleClose" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <EditForm Model="columnData" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                
                <div class="space-y-4">
                    <!-- –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                            –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ *
                        </label>
                        <InputText @bind-Value="columnData.Title" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                   placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏" />
                        <ValidationMessage For="@(() => columnData.Title)" class="text-red-600 text-sm mt-1" />
                    </div>

                    <!-- –ü–æ—Ä—è–¥–æ–∫ -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                            –ü–æ–∑–∏—Ü–∏—è
                        </label>
                        <InputNumber @bind-Value="columnData.Order" 
                                     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                     min="1" />
                        <p class="text-xs text-gray-500 mt-1">–û—Å—Ç–∞–≤—å—Ç–µ 0 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü</p>
                    </div>
                </div>

                <!-- –ö–Ω–æ–ø–∫–∏ -->
                <div class="flex justify-end space-x-3 mt-6">
                    <button type="button" @onclick="HandleClose"
                            class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button type="submit" disabled="@isSubmitting"
                            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-400 transition-colors flex items-center">
                        @if (isSubmitting)
                        {
                            <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <text>–°–æ–∑–¥–∞–Ω–∏–µ...</text>
                        }
                        else
                        {
                            <span>–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É</span>
                        }
                    </button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
                    <div class="flex">
                        <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="text-red-800 text-sm">@errorMessage</span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string ProjectId { get; set; } = string.Empty;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<CreateColumnRequest> OnColumnCreated { get; set; }

    private CreateColumnRequest columnData = new();
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;

    protected override void OnParametersSet()
    {
        if (IsVisible && !string.IsNullOrEmpty(ProjectId))
        {
            columnData = new CreateColumnRequest 
            { 
                ProjectId = ProjectId,
                Order = 0 
            };
            errorMessage = string.Empty;
        }
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        errorMessage = string.Empty;

        try
        {
            await OnColumnCreated.InvokeAsync(columnData);
            await HandleClose();
        }
        catch (Exception ex)
        {
            errorMessage = $"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: {ex.Message}";
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleClose()
    {
        if (isSubmitting) return;
        
        await OnClose.InvokeAsync();
    }

    private async Task HandleBackdropClick()
    {
        await HandleClose();
    }
} 
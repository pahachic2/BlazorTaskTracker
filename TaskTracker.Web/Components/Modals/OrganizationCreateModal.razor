@using TaskTracker.Models
@* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ *@

@if (IsVisible)
{
    <div class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <!-- –§–æ–Ω –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è -->
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <!-- –§–æ–Ω –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è -->
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @onclick="HandleClose"></div>

            <!-- –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ -->
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ -->
            <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
                
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
                <div class="sm:flex sm:items-start mb-6">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
                        </h3>
                        <p class="mt-1 text-sm text-gray-500">
                            –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π
                        </p>
                    </div>
                </div>

                <!-- –§–æ—Ä–º–∞ -->
                <EditForm Model="@organizationModel" OnValidSubmit="@HandleSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="space-y-4">
                        <!-- –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ -->
                        <div>
                            <label for="org-name" class="block text-sm font-medium text-gray-700 mb-1">
                                –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ *
                            </label>
                            <InputText id="org-name" @bind-Value="organizationModel.Name" 
                                     class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                     placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" />
                            <ValidationMessage For="@(() => organizationModel.Name)" class="text-red-600 text-sm mt-1" />
                        </div>

                        <!-- –û–ø–∏—Å–∞–Ω–∏–µ -->
                        <div>
                            <label for="org-description" class="block text-sm font-medium text-gray-700 mb-1">
                                –û–ø–∏—Å–∞–Ω–∏–µ
                            </label>
                            <InputTextArea id="org-description" @bind-Value="organizationModel.Description" 
                                         class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 resize-none"
                                         rows="3"
                                         placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />
                        </div>

                        <!-- –ò–∫–æ–Ω–∫–∞ -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                –í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É
                            </label>
                            <div class="grid grid-cols-8 gap-2">
                                @foreach (var icon in availableIcons)
                                {
                                    <button type="button" 
                                            class="@GetIconButtonClasses(icon)"
                                            @onclick="@(() => organizationModel.Icon = icon)">
                                        @icon
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- –¶–≤–µ—Ç -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç
                            </label>
                            <div class="grid grid-cols-6 gap-2">
                                @foreach (var color in availableColors)
                                {
                                    <button type="button" 
                                            class="@GetColorButtonClasses(color.Value)"
                                            @onclick="@(() => organizationModel.Color = color.Value)">
                                        <div class="w-6 h-6 @color.Value rounded-full mx-auto"></div>
                                        <span class="text-xs text-gray-600 mt-1 block">@color.Key</span>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- –ö–Ω–æ–ø–∫–∏ -->
                    <div class="mt-6 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                        <button type="submit" 
                                class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:col-start-2 sm:text-sm">
                            –°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
                        </button>
                        <button type="button" 
                                @onclick="HandleClose"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:col-start-1 sm:text-sm">
                            –û—Ç–º–µ–Ω–∏—Ç—å
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Organization> OnOrganizationCreated { get; set; }

    private Organization organizationModel = new();

    private readonly string[] availableIcons = { "üè¢", "üèõÔ∏è", "üè≠", "üèóÔ∏è", "üè™", "üè¨", "üè¶", "üè®", "‚≠ê", "üöÄ", "üí°", "‚ö°", "üî•", "üíé", "üéØ", "üåü" };
    
    private readonly Dictionary<string, string> availableColors = new()
    {
        { "–°–∏–Ω–∏–π", "bg-blue-500" },
        { "–ó–µ–ª—ë–Ω—ã–π", "bg-green-500" },
        { "–ö—Ä–∞—Å–Ω—ã–π", "bg-red-500" },
        { "–ñ—ë–ª—Ç—ã–π", "bg-yellow-500" },
        { "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "bg-purple-500" },
        { "–†–æ–∑–æ–≤—ã–π", "bg-pink-500" },
        { "–ò–Ω–¥–∏–≥–æ", "bg-indigo-500" },
        { "–°–µ—Ä—ã–π", "bg-gray-500" }
    };

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            organizationModel = new Organization
            {
                Icon = "üè¢",
                Color = "bg-blue-500"
            };
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(organizationModel.Name))
        {
            return;
        }

        await OnOrganizationCreated.InvokeAsync(organizationModel);
        await HandleClose();
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
    }

    private string GetIconButtonClasses(string icon)
    {
        var baseClasses = "p-2 rounded-lg border-2 text-xl hover:bg-gray-50 transition-colors";
        if (organizationModel.Icon == icon)
        {
            return $"{baseClasses} border-blue-500 bg-blue-50";
        }
        return $"{baseClasses} border-gray-200";
    }

    private string GetColorButtonClasses(string color)
    {
        var baseClasses = "p-2 rounded-lg border-2 hover:bg-gray-50 transition-colors text-center";
        if (organizationModel.Color == color)
        {
            return $"{baseClasses} border-blue-500 bg-blue-50";
        }
        return $"{baseClasses} border-gray-200";
    }
} 
@using TaskTracker.Web.Models
@* Модальное окно для создания новой задачи *@

@if (IsVisible)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" @onclick="CloseModal">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-screen overflow-y-auto" @onclick:stopPropagation="true">
            <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                <!-- Заголовок модального окна -->
                <div class="flex justify-between items-center p-6 border-b border-gray-200">
                    <h2 class="text-xl font-semibold text-gray-900">Создать новую задачу</h2>
                    <button type="button" @onclick="CloseModal" class="text-gray-400 hover:text-gray-600 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>

                <!-- Содержимое модального окна -->
                <div class="p-6 space-y-4">
                    <!-- Название задачи -->
                    <div>
                        <label for="taskTitle" class="block text-sm font-medium text-gray-700 mb-2">
                            Название задачи <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="taskTitle" @bind="newTask.Title" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                               placeholder="Введите название задачи..." />
                    </div>

                    <!-- Описание задачи -->
                    <div>
                        <label for="taskDescription" class="block text-sm font-medium text-gray-700 mb-2">
                            Описание
                        </label>
                        <textarea id="taskDescription" @bind="newTask.Description" rows="3"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                                  placeholder="Описание задачи (необязательно)..."></textarea>
                    </div>

                    <!-- Теги -->
                    <div>
                        <label for="taskTags" class="block text-sm font-medium text-gray-700 mb-2">
                            Теги
                        </label>
                        <div class="flex flex-wrap gap-2 mb-2">
                            @foreach (var tag in newTask.Tags)
                            {
                                <span class="@GetTagClasses(tag) px-2 py-1 rounded text-xs font-medium flex items-center">
                                    @tag
                                    <button type="button" @onclick="@(() => RemoveTag(tag))" class="ml-1 text-xs">×</button>
                                </span>
                            }
                        </div>
                        <div class="flex">
                            <input type="text" @bind="newTagInput" @onkeypress="HandleTagKeyPress"
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                   placeholder="Добавить тег..." />
                            <button type="button" @onclick="AddTag"
                                    class="px-4 py-2 bg-gray-100 border border-l-0 border-gray-300 rounded-r-lg hover:bg-gray-200 transition-colors">
                                +
                            </button>
                        </div>
                        <div class="flex flex-wrap gap-1 mt-2">
                            @foreach (var presetTag in PresetTags)
                            {
                                <button type="button" @onclick="@(() => AddPresetTag(presetTag))"
                                        class="text-xs px-2 py-1 border border-gray-300 rounded hover:bg-gray-50 transition-colors">
                                    @presetTag
                                </button>
                            }
                        </div>
                    </div>

                    <!-- Исполнители -->
                    <div>
                        <label for="taskAssignees" class="block text-sm font-medium text-gray-700 mb-2">
                            Исполнители
                        </label>
                        <div class="flex flex-wrap gap-2 mb-2">
                            @foreach (var assignee in newTask.Assignees)
                            {
                                <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-medium flex items-center">
                                    @assignee
                                    <button type="button" @onclick="@(() => RemoveAssignee(assignee))" class="ml-1 text-xs">×</button>
                                </span>
                            }
                        </div>
                        <div class="flex">
                            <input type="text" @bind="newAssigneeInput" @onkeypress="HandleAssigneeKeyPress"
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                   placeholder="Добавить исполнителя..." />
                            <button type="button" @onclick="AddAssignee"
                                    class="px-4 py-2 bg-gray-100 border border-l-0 border-gray-300 rounded-r-lg hover:bg-gray-200 transition-colors">
                                +
                            </button>
                        </div>
                        <div class="flex flex-wrap gap-1 mt-2">
                            @foreach (var presetAssignee in PresetAssignees)
                            {
                                <button type="button" @onclick="@(() => AddPresetAssignee(presetAssignee))"
                                        class="text-xs px-2 py-1 border border-gray-300 rounded hover:bg-gray-50 transition-colors">
                                    @presetAssignee
                                </button>
                            }
                        </div>
                    </div>

                    <!-- Дата выполнения -->
                    <div>
                        <label for="taskDueDate" class="block text-sm font-medium text-gray-700 mb-2">
                            Дата выполнения
                        </label>
                        <input type="date" id="taskDueDate" @bind="dueDate" @bind:format="yyyy-MM-dd"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>
                </div>

                <!-- Кнопки действий -->
                <div class="flex justify-end space-x-3 p-6 border-t border-gray-200 bg-gray-50 rounded-b-lg">
                    <button type="button" @onclick="CloseModal"
                            class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Отмена
                    </button>
                    <button type="submit" disabled="@(!IsFormValid)"
                            class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors">
                        Создать задачу
                    </button>
                </div>
            </form>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<KanbanTask> OnTaskCreated { get; set; }

    private KanbanTask newTask = new();
    private string newTagInput = "";
    private string newAssigneeInput = "";
    private DateTime? dueDate;

    private readonly List<string> PresetTags = new() { "Frontend", "Backend", "Bug", "Feature", "Urgent", "Design", "Testing", "DevOps", "Documentation" };
    private readonly List<string> PresetAssignees = new() { "Анна Иванова", "Петр Сидоров", "Мария Петрова", "Иван Козлов" };

    private bool IsFormValid => !string.IsNullOrWhiteSpace(newTask.Title);

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            ResetForm();
        }
    }

    private void ResetForm()
    {
        newTask = new KanbanTask
        {
            Id = Guid.NewGuid().ToString(),
            Tags = new List<string>(),
            Assignees = new List<string>()
        };
        newTagInput = "";
        newAssigneeInput = "";
        dueDate = null;
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private async Task HandleSubmit()
    {
        if (!IsFormValid) return;

        // Устанавливаем дату выполнения, если она указана
        if (dueDate.HasValue)
        {
            newTask.DueDate = dueDate.Value;
        }

        newTask.ColumnId = "todo"; // Всегда добавляем в первую колонку

        await OnTaskCreated.InvokeAsync(newTask);
        await CloseModal();
    }

    // Методы для работы с тегами
    private void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(newTagInput) && !newTask.Tags.Contains(newTagInput.Trim()))
        {
            newTask.Tags.Add(newTagInput.Trim());
            newTagInput = "";
        }
    }

    private void AddPresetTag(string tag)
    {
        if (!newTask.Tags.Contains(tag))
        {
            newTask.Tags.Add(tag);
        }
    }

    private void RemoveTag(string tag)
    {
        newTask.Tags.Remove(tag);
    }

    private async Task HandleTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddTag();
        }
    }

    // Методы для работы с исполнителями
    private void AddAssignee()
    {
        if (!string.IsNullOrWhiteSpace(newAssigneeInput) && !newTask.Assignees.Contains(newAssigneeInput.Trim()))
        {
            newTask.Assignees.Add(newAssigneeInput.Trim());
            newAssigneeInput = "";
        }
    }

    private void AddPresetAssignee(string assignee)
    {
        if (!newTask.Assignees.Contains(assignee))
        {
            newTask.Assignees.Add(assignee);
        }
    }

    private void RemoveAssignee(string assignee)
    {
        newTask.Assignees.Remove(assignee);
    }

    private async Task HandleAssigneeKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddAssignee();
        }
    }

    // Стили для тегов
    private string GetTagClasses(string tag)
    {
        return tag.ToLower() switch
        {
            "frontend" => "bg-blue-100 text-blue-800",
            "backend" => "bg-green-100 text-green-800",
            "bug" => "bg-red-100 text-red-800",
            "feature" => "bg-purple-100 text-purple-800",
            "urgent" => "bg-orange-100 text-orange-800",
            "design" => "bg-pink-100 text-pink-800",
            "testing" => "bg-yellow-100 text-yellow-800",
            "devops" => "bg-indigo-100 text-indigo-800",
            "documentation" => "bg-gray-100 text-gray-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
} 
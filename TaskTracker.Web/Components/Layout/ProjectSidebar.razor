@* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ *@

<aside class="w-64 bg-white shadow-lg flex flex-col border-r border-gray-200">
    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
    <div class="p-4 border-b border-gray-200">
        <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                <span class="text-white font-bold text-sm">T</span>
            </div>
            <div>
                <h1 class="text-lg font-semibold text-gray-900">TaskTracker</h1>
                <p class="text-xs text-gray-500">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏</p>
            </div>
        </div>
    </div>

    <!-- –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ -->
    <div class="p-4 border-b border-gray-200">
        <button @onclick="HandleCreateProject"
                class="w-full flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        </button>
    </div>

    <!-- –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ -->
    <div class="flex-1 overflow-y-auto">
        <div class="p-2">
            <h2 class="text-xs font-semibold text-gray-500 uppercase tracking-wide px-2 py-2">
                –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã (@Projects.Count)
            </h2>
            
            @if (Projects.Any())
            {
                <div class="space-y-1">
                    @foreach (var project in Projects)
                    {
                        <div class="@GetProjectItemClasses(project)" 
                             @onclick="@(() => HandleProjectSelect(project))">
                            <div class="flex items-center space-x-3 p-3 rounded-lg cursor-pointer">
                                <!-- –ò–∫–æ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ -->
                                <div class="flex-shrink-0">
                                    <div class="w-8 h-8 @project.Color rounded-lg flex items-center justify-center text-white text-sm">
                                        @project.Icon
                                    </div>
                                </div>
                                
                                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ -->
                                <div class="flex-1 min-w-0">
                                    <p class="text-sm font-medium text-gray-900 truncate">
                                        @project.Name
                                    </p>
                                    @if (!string.IsNullOrEmpty(project.Description))
                                    {
                                        <p class="text-xs text-gray-500 truncate">
                                            @project.Description
                                        </p>
                                    }
                                    <div class="flex items-center space-x-2 mt-1">
                                        <span class="text-xs text-gray-400">
                                            @project.TaskCount –∑–∞–¥–∞—á
                                        </span>
                                        @if (project.Members.Any())
                                        {
                                            <span class="text-xs text-gray-400">‚Ä¢</span>
                                            <span class="text-xs text-gray-400">
                                                @project.Members.Count —É—á–∞—Å—Ç–Ω–∏–∫@(project.Members.Count == 1 ? "" : project.Members.Count < 5 ? "–∞" : "–æ–≤")
                                            </span>
                                        }
                                    </div>
                                </div>
                                
                                <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ -->
                                @if (SelectedProject?.Id == project.Id)
                                {
                                    <div class="flex-shrink-0">
                                        <div class="w-2 h-2 bg-blue-600 rounded-full"></div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-8">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z"></path>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
                    <p class="mt-1 text-sm text-gray-500 px-4">
                        –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
                    </p>
                </div>
            }
        </div>
    </div>

    <!-- –ù–∏–∂–Ω—è—è —Å–µ–∫—Ü–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
    <div class="border-t border-gray-200 p-4">
        <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                <span class="text-gray-600 font-medium text-sm">
                    @(string.IsNullOrEmpty(UserName) ? "?" : UserName.Substring(0, 1).ToUpper())
                </span>
            </div>
            <div class="flex-1 min-w-0">
                <p class="text-sm font-medium text-gray-900 truncate">@UserName</p>
                <p class="text-xs text-gray-500 truncate">@UserEmail</p>
            </div>
            <button @onclick="OnLogout" class="p-1 text-gray-400 hover:text-gray-600">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                </svg>
            </button>
        </div>
    </div>
</aside>

@code {
    [Parameter] public List<Project> Projects { get; set; } = new();
    [Parameter] public Project? SelectedProject { get; set; }
    [Parameter] public string UserName { get; set; } = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    [Parameter] public string UserEmail { get; set; } = "user@example.com";
    
    [Parameter] public EventCallback<Project> OnProjectSelected { get; set; }
    [Parameter] public EventCallback OnCreateProject { get; set; }
    [Parameter] public EventCallback OnLogout { get; set; }

    private async Task HandleProjectSelect(Project project)
    {
        Console.WriteLine($"üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project.Name}");
        await OnProjectSelected.InvokeAsync(project);
    }

    private async Task HandleCreateProject()
    {
        Console.WriteLine("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞");
        await OnCreateProject.InvokeAsync();
    }

    private string GetProjectItemClasses(Project project)
    {
        if (SelectedProject?.Id == project.Id)
        {
            return "bg-blue-50 border-blue-200 border";
        }
        return "hover:bg-gray-50 border border-transparent";
    }
} 
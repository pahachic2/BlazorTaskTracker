@using TaskTracker.Web.Models
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@* Kanban –¥–æ—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç *@

<div class="flex space-x-6 overflow-x-auto p-6 h-full">
    @foreach (var column in Columns)
    {
        <div id="column-@column.Id" 
             class="kanban-column flex-shrink-0 w-80 bg-gray-100 rounded-lg p-4 flex flex-col">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ -->
            <div class="flex items-center justify-between mb-4">
                <h3 class="font-semibold text-gray-700 text-lg">@column.Title</h3>
                <span class="bg-gray-200 text-gray-600 px-2 py-1 rounded-full text-xs font-medium">
                    @column.Tasks.Count
                </span>
            </div>
            
            <!-- –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á -->
            <div class="space-y-3 flex-1 overflow-y-auto">
                @foreach (var task in column.Tasks)
                {
                    <div id="task-@task.Id"
                         data-task-id="@task.Id"
                         data-column-id="@column.Id"
                         class="kanban-task bg-white p-4 rounded-lg shadow-sm border border-gray-200 cursor-pointer hover:shadow-md transition-shadow"
                         @onclick="@(() => HandleTaskClick(task))"
                         @onmouseenter="@(() => HandleTaskMouseEnter(task))"
                         @onclick:preventDefault="false"
                         @onclick:stopPropagation="false">
                        
                        <!-- –¢–µ–≥–∏ –∑–∞–¥–∞—á–∏ -->
                        @if (task.Tags.Any())
                        {
                            <div class="flex flex-wrap gap-1 mb-3">
                                @foreach (var tag in task.Tags)
                                {
                                    <span class="@GetTagClasses(tag) px-2 py-1 rounded text-xs font-medium">
                                        @tag
                                    </span>
                                }
                            </div>
                        }
                        
                        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ -->
                        <h4 class="font-medium text-gray-900 text-sm mb-2 line-clamp-2">
                            @task.Title
                        </h4>
                        
                        <!-- –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ -->
                        @if (!string.IsNullOrEmpty(task.Description))
                        {
                            <p class="text-gray-600 text-xs mb-3 line-clamp-2">
                                @task.Description
                            </p>
                        }
                        
                        <!-- –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                        <div class="flex items-center justify-between">
                            <!-- –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è -->
                            @if (task.DueDate.HasValue)
                            {
                                <div class="flex items-center space-x-1">
                                    <svg class="w-3 h-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    <span class="@GetDueDateClasses(task.DueDate.Value) text-xs">
                                        @task.DueDate.Value.ToString("dd MMM")
                                    </span>
                                </div>
                            }
                            
                            <!-- –ê–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π -->
                            @if (task.Assignees.Any())
                            {
                                <div class="flex -space-x-1">
                                    @foreach (var assignee in task.Assignees.Take(3))
                                    {
                                        <div class="w-6 h-6 rounded-full @GetAssigneeColor(assignee) flex items-center justify-center border-2 border-white text-white text-xs font-medium"
                                             title="@assignee">
                                            @assignee.Substring(0, 1).ToUpper()
                                        </div>
                                    }
                                    @if (task.Assignees.Count > 3)
                                    {
                                        <div class="w-6 h-6 rounded-full bg-gray-400 flex items-center justify-center border-2 border-white text-white text-xs font-medium"
                                             title="–ï—â–µ @(task.Assignees.Count - 3)">
                                            +@(task.Assignees.Count - 3)
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            
            <!-- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ -->
            <button @onclick="@(() => OnAddTaskToColumn.InvokeAsync(column.Id))"
                    class="mt-3 w-full py-2 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors text-sm">
                + –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
            </button>
        </div>
    }
    
    <!-- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ -->
    @if (ShowAddColumnButton)
    {
        <div class="flex-shrink-0 w-80">
            <button @onclick="OnAddColumn"
                    class="w-full h-32 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors flex flex-col items-center justify-center space-y-2">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                <span class="text-sm font-medium">–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É</span>
            </button>
        </div>
    }
</div>

@code {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    [Parameter] public List<KanbanColumn> Columns { get; set; } = new();
    [Parameter] public bool ShowAddColumnButton { get; set; } = true;
    
    // –°–æ–±—ã—Ç–∏—è
    [Parameter] public EventCallback<KanbanTask> OnTaskClick { get; set; }
    [Parameter] public EventCallback<string> OnAddTaskToColumn { get; set; }
    [Parameter] public EventCallback OnAddColumn { get; set; }
    [Parameter] public EventCallback<TaskMovedEventArgs> OnTaskMoved { get; set; }

    private bool jsInteropDone = false;
    private DotNetObjectReference<KanbanBoard>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"üîÑ BLAZOR: OnAfterRenderAsync –≤—ã–∑–≤–∞–Ω, firstRender: {firstRender}, jsInteropDone: {jsInteropDone}");
        
        if (firstRender)
        {
            Console.WriteLine("üîÑ BLAZOR: –≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...");
            
            dotNetRef = DotNetObjectReference.Create(this);
            Console.WriteLine("üîÑ BLAZOR: DotNetObjectReference —Å–æ–∑–¥–∞–Ω");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ JavaScript —Ñ—É–Ω–∫—Ü–∏–∏
            try
            {
                var hasWindow = await JSRuntime.InvokeAsync<bool>("eval", "typeof window !== 'undefined'");
                Console.WriteLine($"üîÑ BLAZOR: Window –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {hasWindow}");
                
                var hasConsole = await JSRuntime.InvokeAsync<bool>("eval", "typeof console !== 'undefined'");
                Console.WriteLine($"üîÑ BLAZOR: Console –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {hasConsole}");
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
                await JSRuntime.InvokeVoidAsync("console.log", "üîÑ BLAZOR: –¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ JavaScript –∏–∑ Blazor");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à –æ–±—ä–µ–∫—Ç
                var hasKanbanDragDrop = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.kanbanDragDrop !== 'undefined'");
                Console.WriteLine($"üîÑ BLAZOR: kanbanDragDrop –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {hasKanbanDragDrop}");
                
                if (!hasKanbanDragDrop)
                {
                    Console.WriteLine("‚ùå BLAZOR: kanbanDragDrop –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–∞...");
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    await JSRuntime.InvokeVoidAsync("eval", @"
                        if (!window.kanbanDragDrop) {
                            console.log('üîÑ JS: –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ kanbanDragDrop...');
                            var script = document.createElement('script');
                            script.src = 'js/kanban-drag-drop.js';
                            script.onload = function() { console.log('‚úÖ JS: –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ'); };
                            script.onerror = function() { console.log('‚ùå JS: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞'); };
                            document.head.appendChild(script);
                        }
                    ");
                    
                    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                    await Task.Delay(1000);
                    
                    hasKanbanDragDrop = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.kanbanDragDrop !== 'undefined'");
                    Console.WriteLine($"üîÑ BLAZOR: –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ kanbanDragDrop –¥–æ—Å—Ç—É–ø–µ–Ω: {hasKanbanDragDrop}");
                }
                
                if (hasKanbanDragDrop)
                {
                    await InitializeDragAndDrop();
                }
                else
                {
                    Console.WriteLine("‚ùå BLAZOR: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å kanbanDragDrop!");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå BLAZOR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ JavaScript: {ex.Message}");
            }
        }
        else if (jsInteropDone)
        {
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, –Ω–æ JS —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, 
            // –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            Console.WriteLine("üîÑ BLAZOR: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...");
            await ReinitializeDragAndDrop();
        }
    }
    
    private async Task InitializeDragAndDrop()
    {
        try
        {
            Console.WriteLine("üöÄ BLAZOR: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é drag-and-drop...");
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏ –∫–æ–ª–æ–Ω–æ–∫
            foreach (var column in Columns)
            {
                Console.WriteLine($"üèóÔ∏è BLAZOR: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–∫–∏: {column.Id} —Å {column.Tasks.Count} –∑–∞–¥–∞—á–∞–º–∏");
                
                // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drop zone –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏
                await JSRuntime.InvokeVoidAsync("kanbanDragDrop.initColumnDropZone", $"column-{column.Id}", column.Id, dotNetRef);
                
                // –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ
                foreach (var task in column.Tasks)
                {
                    Console.WriteLine($"üéØ BLAZOR: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏: {task.Id} ({task.Title}) –≤ –∫–æ–ª–æ–Ω–∫–µ {column.Id}");
                    await JSRuntime.InvokeVoidAsync("kanbanDragDrop.initTaskDragDrop", $"task-{task.Id}", task.Id, column.Id);
                }
            }
            
            Console.WriteLine("‚úÖ BLAZOR: Drag-and-drop –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
            jsInteropDone = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå BLAZOR: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop: {ex.Message}");
        }
    }

    private async Task ReinitializeDragAndDrop()
    {
        try
        {
            Console.WriteLine("üîÑ BLAZOR: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop...");
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            await Task.Delay(100);
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            foreach (var column in Columns)
            {
                foreach (var task in column.Tasks)
                {
                    Console.WriteLine($"üîÑ BLAZOR: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏: {task.Id} –≤ –∫–æ–ª–æ–Ω–∫–µ {column.Id}");
                    await JSRuntime.InvokeVoidAsync("kanbanDragDrop.initTaskDragDrop", $"task-{task.Id}", task.Id, column.Id);
                }
            }
            
            Console.WriteLine("‚úÖ BLAZOR: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå BLAZOR: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop: {ex.Message}");
        }
    }

    private async Task HandleTaskClick(KanbanTask task)
    {
        Console.WriteLine($"üñ±Ô∏è BLAZOR: –ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ: {task.Title}");
        await OnTaskClick.InvokeAsync(task);
    }
    
    private void HandleTaskMouseEnter(KanbanTask task)
    {
        Console.WriteLine($"üê≠ BLAZOR: –ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ –Ω–∞ –∑–∞–¥–∞—á—É: {task.Title} (ID: {task.Id})");
    }

    [JSInvokable]
    public async Task OnTaskDropped(string taskId, string fromColumnId, string toColumnId)
    {
        Console.WriteLine($"üéØ BLAZOR: –ü–æ–ª—É—á–µ–Ω drop —Å–æ–±—ã—Ç–∏—è - –∑–∞–¥–∞—á–∞ {taskId} –∏–∑ {fromColumnId} –≤ {toColumnId}");
        
        var args = new TaskMovedEventArgs
        {
            TaskId = taskId,
            FromColumnId = fromColumnId,
            ToColumnId = toColumnId
        };
        await OnTaskMoved.InvokeAsync(args);
        StateHasChanged(); // Ensure UI updates
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤—ã–º columnId
        try
        {
            await Task.Delay(200); // –î–∞–µ–º –≤—Ä–µ–º—è UI –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            await JSRuntime.InvokeVoidAsync("kanbanDragDrop.initTaskDragDrop", $"task-{taskId}", taskId, toColumnId);
            Console.WriteLine($"üîÑ BLAZOR: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω drag-and-drop –¥–ª—è –∑–∞–¥–∞—á–∏ {taskId} –≤ –∫–æ–ª–æ–Ω–∫–µ {toColumnId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå BLAZOR: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop: {ex.Message}");
        }
        
        Console.WriteLine($"‚úÖ BLAZOR: –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω");
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    private string GetTagClasses(string tag)
    {
        return tag.ToLower() switch
        {
            "frontend" => "bg-blue-100 text-blue-800",
            "backend" => "bg-green-100 text-green-800",
            "bug" => "bg-red-100 text-red-800",
            "feature" => "bg-purple-100 text-purple-800",
            "urgent" => "bg-orange-100 text-orange-800",
            "design" => "bg-pink-100 text-pink-800",
            "testing" => "bg-yellow-100 text-yellow-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
    
    private string GetDueDateClasses(DateTime dueDate)
    {
        var daysUntilDue = (dueDate.Date - DateTime.Now.Date).Days;
        
        if (daysUntilDue < 0)
            return "text-red-600 font-medium"; // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
        else if (daysUntilDue == 0)
            return "text-orange-600 font-medium"; // –°–µ–≥–æ–¥–Ω—è
        else if (daysUntilDue == 1)
            return "text-yellow-600 font-medium"; // –ó–∞–≤—Ç—Ä–∞
        else
            return "text-gray-500"; // –û–±—ã—á–Ω–∞—è –¥–∞—Ç–∞
    }
    
    private string GetAssigneeColor(string assignee)
    {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏
        var hash = assignee.GetHashCode();
        var colors = new[]
        {
            "bg-blue-500", "bg-green-500", "bg-purple-500", "bg-pink-500",
            "bg-indigo-500", "bg-red-500", "bg-yellow-500", "bg-teal-500"
        };
        
        return colors[Math.Abs(hash) % colors.Length];
    }
    
    public async ValueTask DisposeAsync()
    {
        if (dotNetRef != null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("kanbanDragDrop.cleanup");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå BLAZOR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {ex.Message}");
            }
            dotNetRef.Dispose();
        }
        await Task.CompletedTask;
    }

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑–≤–Ω–µ)
    public async Task RefreshDragAndDrop()
    {
        if (jsInteropDone)
        {
            Console.WriteLine("üîÑ BLAZOR: –í–Ω–µ—à–Ω–∏–π –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop...");
            await ReinitializeDragAndDrop();
        }
    }
}
@* Header –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–∞—Å–∫-—Ç—Ä–µ–∫–µ—Ä–∞ *@

<header class="bg-white border-b border-gray-200 px-6 py-4 shadow-sm">
    <div class="flex items-center justify-between">
        <!-- –ì–∞–º–±—É—Ä–≥–µ—Ä-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ -->
        <button @onclick="OnToggleMobileSidebar" aria-label="Open sidebar" class="lg:hidden p-2 mr-2 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
        </button>

        <!-- –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ -->
        <div class="flex items-center space-x-4 min-w-0 max-w-xl">
            <h1 class="text-xl font-semibold text-gray-900 truncate">@ProjectName</h1>
            @if (!string.IsNullOrEmpty(ProjectDescription))
            {
                <span class="text-sm text-gray-500 truncate">@ProjectDescription</span>
            }
        </div>
        
        <!-- –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ø–æ–∏—Å–∫, –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ—Ñ–∏–ª—å -->
        <div class="flex items-center space-x-2 md:space-x-4">
            <!-- –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ -->
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
                <input type="text" 
                       @bind="searchQuery" 
                       @bind:event="oninput"
                       @onkeypress="HandleSearchKeyPress"
                       placeholder="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..." 
                       class="block w-32 sm:w-40 md:w-64 pl-10 pr-3 py-2 border border-gray-300 rounded-lg text-sm placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
            </div>
            
            <!-- –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" -->
            <button @onclick="HandleAddTaskClick" 
                    class="inline-flex items-center px-3 md:px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                <svg class="w-4 h-4 md:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                <span class="hidden md:inline">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</span>
            </button>
            
            <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) -->
            @if (ShowFiltersButton)
            {
                <button @onclick="HandleFiltersClick" 
                        class="inline-flex items-center px-2 md:px-3 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                    <svg class="w-4 h-4 md:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                    </svg>
                    <span class="hidden md:inline">–§–∏–ª—å—Ç—Ä—ã</span>
                </button>
            }
            
            <!-- –ò–∫–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
            <div class="relative">
                <button @onclick="ToggleUserMenu" 
                        class="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all">
                    @if (!string.IsNullOrEmpty(UserAvatarUrl))
                    {
                        <img class="h-8 w-8 rounded-full object-cover" src="@UserAvatarUrl" alt="@UserName">
                    }
                    else
                    {
                        <div class="h-8 w-8 rounded-full bg-gray-300 flex items-center justify-center">
                            <span class="text-sm font-medium text-gray-700">
                                @(string.IsNullOrEmpty(UserName) ? "?" : UserName.Substring(0, 1).ToUpper())
                            </span>
                        </div>
                    }
                </button>
                
                <!-- –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ) -->
                @if (showUserMenu)
                {
                    <div class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50">
                        <div class="px-4 py-2 border-b border-gray-100">
                            <p class="text-sm font-medium text-gray-900">@UserName</p>
                            <p class="text-xs text-gray-500">@UserEmail</p>
                        </div>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
                            –ü—Ä–æ—Ñ–∏–ª—å
                        </a>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
                            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        </a>
                        <div class="border-t border-gray-100">
                            <button @onclick="HandleLogoutClick" 
                                    class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors">
                                –í—ã–π—Ç–∏
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</header>

@code {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    [Parameter] public string ProjectName { get; set; } = "–ú–æ–π –ø—Ä–æ–µ–∫—Ç";
    [Parameter] public string ProjectDescription { get; set; } = "";
    [Parameter] public string UserName { get; set; } = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    [Parameter] public string UserEmail { get; set; } = "user@example.com";
    [Parameter] public string UserAvatarUrl { get; set; } = "";
    [Parameter] public bool ShowFiltersButton { get; set; } = true;
    
    // –°–æ–±—ã—Ç–∏—è
    [Parameter] public EventCallback OnAddTaskClick { get; set; }
    [Parameter] public EventCallback OnFiltersClick { get; set; }
    [Parameter] public EventCallback OnUserMenuClick { get; set; }
    [Parameter] public EventCallback OnLogoutClick { get; set; }
    [Parameter] public EventCallback<string> OnSearchChanged { get; set; }
    [Parameter] public EventCallback OnToggleMobileSidebar { get; set; }
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    private string searchQuery = "";
    private bool showUserMenu = false;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && OnSearchChanged.HasDelegate)
        {
            await OnSearchChanged.InvokeAsync(searchQuery);
        }
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å JavaScript –¥–ª—è —ç—Ç–æ–≥–æ)
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å JavaScript –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    private async Task HandleAddTaskClick()
    {
        Console.WriteLine("üî• HEADER: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'");
        if (OnAddTaskClick.HasDelegate)
        {
            await OnAddTaskClick.InvokeAsync();
        }
    }
    
    private async Task HandleFiltersClick()
    {
        Console.WriteLine("üî• HEADER: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–§–∏–ª—å—Ç—Ä—ã'");
        if (OnFiltersClick.HasDelegate)
        {
            await OnFiltersClick.InvokeAsync();
        }
    }
    
    private async Task HandleLogoutClick()
    {
        Console.WriteLine("üî• HEADER: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–í—ã–π—Ç–∏'");
        if (OnLogoutClick.HasDelegate)
        {
            await OnLogoutClick.InvokeAsync();
        }
    }
} 
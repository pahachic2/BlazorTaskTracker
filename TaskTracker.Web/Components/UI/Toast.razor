@using TaskTracker.Web.Models
@inject IJSRuntime JSRuntime

<div class="@GetToastClasses() transform transition-all duration-300 ease-in-out @(IsVisible ? "translate-x-0 opacity-100" : "translate-x-full opacity-0")"
     id="toast-@ToastMessage.Id">
    
    <!-- Иконка и контент -->
    <div class="flex items-start">
        <!-- Иконка -->
        <div class="flex-shrink-0">
            <div class="@GetIconClasses()">
                @switch (ToastMessage.Type)
                {
                    case ToastType.Success:
                        <!-- Check Circle Icon -->
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                        </svg>
                        break;
                    case ToastType.Error:
                        <!-- X Circle Icon -->
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                        </svg>
                        break;
                    case ToastType.Warning:
                        <!-- Exclamation Triangle Icon -->
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                        </svg>
                        break;
                    case ToastType.Info:
                    default:
                        <!-- Information Circle Icon -->
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                        </svg>
                        break;
                }
            </div>
        </div>
        
        <!-- Контент сообщения -->
        <div class="ml-3 w-0 flex-1">
            @if (!string.IsNullOrEmpty(ToastMessage.Title))
            {
                <p class="text-sm font-medium @GetTextColorClasses()">
                    @ToastMessage.Title
                </p>
            }
            @if (!string.IsNullOrEmpty(ToastMessage.Message))
            {
                <p class="@(string.IsNullOrEmpty(ToastMessage.Title) ? "text-sm font-medium" : "mt-1 text-sm") @GetTextColorClasses()">
                    @ToastMessage.Message
                </p>
            }
        </div>
        
        <!-- Кнопка закрытия -->
        <div class="ml-4 flex-shrink-0 flex">
            <button @onclick="OnCloseClick"
                    class="@GetCloseButtonClasses() rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <span class="sr-only">Закрыть</span>
                <!-- X Icon -->
                <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
    </div>
    
    <!-- Прогресс бар -->
    @if (ToastMessage.Duration > 0)
    {
        <div class="mt-2 w-full bg-gray-200 rounded-full h-1">
            <div class="@GetProgressBarClasses() h-1 rounded-full progress-bar"
                 style="animation-duration: @(ToastMessage.Duration)ms;"></div>
        </div>
    }
</div>

@code {
    [Parameter] public required ToastMessage ToastMessage { get; set; }
    [Parameter] public EventCallback<string> OnClose { get; set; }
    
    private bool IsVisible { get; set; } = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Небольшая задержка для плавного появления
        await Task.Delay(50);
        IsVisible = true;
        StateHasChanged();
        
        // Автоматическое удаление через указанное время
        if (ToastMessage.Duration > 0)
        {
            _ = Task.Run(async () =>
            {
                await Task.Delay(ToastMessage.Duration);
                await InvokeAsync(async () =>
                {
                    await CloseToast();
                });
            });
        }
    }
    
    private async Task OnCloseClick()
    {
        await CloseToast();
    }
    
    private async Task CloseToast()
    {
        IsVisible = false;
        StateHasChanged();
        
        // Ждем завершения анимации перед удалением
        await Task.Delay(300);
        await OnClose.InvokeAsync(ToastMessage.Id);
    }
    
    private string GetToastClasses()
    {
        return ToastMessage.Type switch
        {
            ToastType.Success => "max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 border-l-4 border-green-400",
            ToastType.Error => "max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 border-l-4 border-red-400",
            ToastType.Warning => "max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 border-l-4 border-yellow-400",
            ToastType.Info => "max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 border-l-4 border-blue-400",
            _ => "max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 border-l-4 border-blue-400"
        } + " p-4";
    }
    
    private string GetIconClasses()
    {
        return ToastMessage.Type switch
        {
            ToastType.Success => "w-8 h-8 text-green-400",
            ToastType.Error => "w-8 h-8 text-red-400",
            ToastType.Warning => "w-8 h-8 text-yellow-400",
            ToastType.Info => "w-8 h-8 text-blue-400",
            _ => "w-8 h-8 text-blue-400"
        };
    }
    
    private string GetTextColorClasses()
    {
        return ToastMessage.Type switch
        {
            ToastType.Success => "text-green-900",
            ToastType.Error => "text-red-900", 
            ToastType.Warning => "text-yellow-900",
            ToastType.Info => "text-blue-900",
            _ => "text-blue-900"
        };
    }
    
    private string GetCloseButtonClasses()
    {
        return ToastMessage.Type switch
        {
            ToastType.Success => "text-green-400 hover:text-green-600",
            ToastType.Error => "text-red-400 hover:text-red-600",
            ToastType.Warning => "text-yellow-400 hover:text-yellow-600", 
            ToastType.Info => "text-blue-400 hover:text-blue-600",
            _ => "text-blue-400 hover:text-blue-600"
        };
    }
    
    private string GetProgressBarClasses()
    {
        return ToastMessage.Type switch
        {
            ToastType.Success => "bg-green-400",
            ToastType.Error => "bg-red-400",
            ToastType.Warning => "bg-yellow-400",
            ToastType.Info => "bg-blue-400",
            _ => "bg-blue-400"
        };
    }
} 
@using TaskTracker.Models
@using TaskTracker.Models.DTOs
@inject IApiService ApiService
@inject OrganizationInvitationService InvitationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

@* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö *@

<div class="relative">
    <!-- –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
    <button @onclick="ToggleNotifications" 
            class="relative p-2 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 rounded-lg transition-colors">
        
        <!-- –ò–∫–æ–Ω–∫–∞ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞ -->
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
        </svg>
        
        <!-- –ë–µ–π–¥–∂ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
        @if (invitations.Count > 0)
        {
            <span class="absolute -top-1 -right-1 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-600 rounded-full min-w-[1.25rem] h-5">
                @invitations.Count
            </span>
        }
    </button>

    <!-- –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
    @if (showNotifications)
    {
        <div class="absolute right-0 mt-2 w-96 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50 max-h-96 overflow-y-auto">
            <div class="px-4 py-3 border-b border-gray-100">
                <h3 class="text-sm font-semibold text-gray-900">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</h3>
                @if (invitations.Count > 0)
                {
                    <p class="text-xs text-gray-500 mt-1">–£ –≤–∞—Å @invitations.Count –Ω–æ–≤—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π</p>
                }
            </div>

            @if (isLoading)
            {
                <!-- –ó–∞–≥—Ä—É–∑–∫–∞ -->
                <div class="px-4 py-8 text-center">
                    <svg class="animate-spin mx-auto h-6 w-6 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <p class="mt-2 text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...</p>
                </div>
            }
            else if (invitations.Count == 0)
            {
                <!-- –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ -->
                <div class="px-4 py-8 text-center">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">–ù–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π</h3>
                    <p class="mt-1 text-sm text-gray-500">–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</p>
                </div>
            }
            else
            {
                <!-- –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π -->
                @foreach (var invitation in invitations)
                {
                    <div class="border-b border-gray-100 last:border-b-0">
                        <div class="px-4 py-3 hover:bg-gray-50 transition-colors">
                            <div class="flex items-start justify-between">
                                <div class="flex-1 min-w-0">
                                    <div class="flex items-center space-x-2 mb-1">
                                        <h4 class="text-sm font-medium text-gray-900 truncate">@invitation.OrganizationName</h4>
                                        <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                            @InvitationService.GetRoleDisplayName(invitation.Role)
                                        </span>
                                    </div>
                                    <p class="text-xs text-gray-500 mb-2">
                                        –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç @invitation.InvitedByName
                                    </p>
                                    <p class="text-xs text-gray-400 mb-3">
                                        –ò—Å—Ç–µ–∫–∞–µ—Ç @invitation.ExpiresAt.ToString("dd.MM.yyyy")
                                    </p>
                                    
                                    <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                                    <div class="flex space-x-2">
                                        <button @onclick="@(() => AcceptInvitation(invitation))"
                                                disabled="@isProcessing"
                                                class="inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                                            @if (isProcessing && processingInvitationId == invitation.Id)
                                            {
                                                <svg class="animate-spin -ml-1 mr-1 h-3 w-3 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                </svg>
                                            }
                                            –ü—Ä–∏–Ω—è—Ç—å
                                        </button>
                                        <button @onclick="@(() => DeclineInvitation(invitation))"
                                                disabled="@isProcessing"
                                                class="inline-flex items-center px-3 py-1 border border-gray-300 text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                                            –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    private List<InvitationResponse> invitations = new();
    private bool showNotifications = false;
    private bool isLoading = false;
    private bool isProcessing = false;
    private string? processingInvitationId = null;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("üîî NOTIFICATIONS: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞");
        await LoadInvitations();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        refreshTimer = new Timer(async _ => await RefreshInvitations(), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        await LoadInvitations();
        await base.OnParametersSetAsync();
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    private async Task ToggleNotifications()
    {
        showNotifications = !showNotifications;
        if (showNotifications)
        {
            await LoadInvitations();
        }
    }

    private async Task LoadInvitations()
    {
        if (isLoading) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            Console.WriteLine("üîî NOTIFICATIONS: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            invitations = await ApiService.GetUserInvitationsAsync();
            Console.WriteLine($"üîî NOTIFICATIONS: –ù–∞–π–¥–µ–Ω–æ {invitations.Count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π");
            
            if (invitations.Count > 0)
            {
                Console.WriteLine("üîî NOTIFICATIONS: –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:");
                foreach (var inv in invitations)
                {
                    Console.WriteLine($"  - {inv.OrganizationName} –æ—Ç {inv.InvitedByName} (—Å—Ç–∞—Ç—É—Å: {inv.Status})");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {ex.Message}");
            Console.WriteLine($"‚ùå NOTIFICATIONS: Stack trace: {ex.StackTrace}");
            invitations = new List<InvitationResponse>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AcceptInvitation(InvitationResponse invitation)
    {
        if (isProcessing) return;

        isProcessing = true;
        processingInvitationId = invitation.Id;
        StateHasChanged();

        try
        {
            Console.WriteLine($"‚úÖ NOTIFICATIONS: –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitation.Id}");
            
            var request = new AcceptInvitationRequest { Token = invitation.Token };
            var result = await InvitationService.AcceptInvitationAsync(request);
            
            if (result?.Success == true)
            {
                // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
                invitations.Remove(invitation);
                Console.WriteLine($"‚úÖ NOTIFICATIONS: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitation.Id} –ø—Ä–∏–Ω—è—Ç–æ");
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
                await Task.Delay(1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            processingInvitationId = null;
            StateHasChanged();
        }
    }

    private async Task DeclineInvitation(InvitationResponse invitation)
    {
        if (isProcessing) return;

        isProcessing = true;
        processingInvitationId = invitation.Id;
        StateHasChanged();

        try
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitation.Id}");
            
            var success = await InvitationService.DeclineInvitationAsync(invitation.Token);
            
            if (success)
            {
                // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
                invitations.Remove(invitation);
                Console.WriteLine($"‚úÖ NOTIFICATIONS: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitation.Id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå NOTIFICATIONS: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            processingInvitationId = null;
            StateHasChanged();
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
    public async Task RefreshInvitations()
    {
        await LoadInvitations();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    public int GetInvitationCount() => invitations.Count;
} 
@page "/"
@page "/projects"
@inject NavigationManager NavigationManager
@using TaskTracker.Web.Components.Layout
@using TaskTracker.Web.Models

<div class="flex h-screen bg-gray-50">
    <!-- –ù–æ–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ -->
    <ProjectSidebar Projects="availableProjects"
                   SelectedProject="selectedProject"
                   UserName="–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
                   UserEmail="anna@example.com"
                   OnProjectSelected="HandleProjectSelected"
                   OnCreateProject="HandleCreateProject"
                   OnLogout="HandleLogout" />
    
    <!-- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (Main Content) -->
    <main class="flex-1 flex flex-col overflow-hidden">
        @if (selectedProject != null)
        {
            <!-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Header -->
            <Header ProjectName="@selectedProject.Name" 
                    ProjectDescription="@selectedProject.Description"
                    UserName="–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
                    UserEmail="anna@example.com"
                    OnAddTaskClick="HandleAddTask"
                    OnSearchChanged="HandleSearch"
                    OnLogoutClick="HandleLogout" />
            
            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
            <div class="flex-1 overflow-hidden">
                <!-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç KanbanBoard -->
                <KanbanBoard @ref="kanbanBoardRef" 
                            Columns="kanbanColumns" 
                            OnTaskClick="HandleTaskClick"
                            OnAddTaskToColumn="HandleAddTaskToColumn"
                            OnAddColumn="HandleAddColumn"
                            OnTaskMoved="HandleTaskMoved" />
            </div>
        }
        else
        {
            <!-- –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ -->
            <div class="flex-1 flex items-center justify-center">
                <div class="text-center max-w-md mx-auto">
                    <div class="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z"></path>
                        </svg>
                    </div>
                    <h2 class="text-2xl font-semibold text-gray-900 mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskTracker!</h2>
                    <p class="text-gray-600 mb-6">
                        –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏.
                    </p>
                    @if (!availableProjects.Any())
                    {
                        <button @onclick="HandleCreateProject"
                                class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
                        </button>
                    }
                </div>
            </div>
        }
    </main>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ -->
<TaskCreateModal IsVisible="isCreateModalVisible" 
                 OnClose="HandleCloseCreateModal" 
                 OnTaskCreated="HandleTaskCreated" />

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ -->
<TaskTracker.Web.Components.Modals.ProjectCreateModal IsVisible="isCreateProjectModalVisible"
                                                      OnClose="HandleCloseProjectModal"
                                                      OnProjectCreated="HandleProjectCreated" />

@code {
    // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    private List<Project> availableProjects = new();
    private Project? selectedProject = null;
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è Kanban –¥–æ—Å–∫–∏
    private List<KanbanColumn> kanbanColumns = new();
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    private bool isCreateModalVisible = false;
    private bool isCreateProjectModalVisible = false;
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç KanbanBoard –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop
    private KanbanBoard? kanbanBoardRef;
    
    protected override void OnInitialized()
    {
        InitializeProjects();
        InitializeKanbanData();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (availableProjects.Any())
        {
            selectedProject = availableProjects.First();
            LoadProjectTasks();
        }
    }
    
    private void InitializeProjects()
    {
        availableProjects = new List<Project>
        {
            new Project
            {
                Id = "project-1",
                Name = "TaskTracker Pro",
                Description = "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
                Icon = "üöÄ",
                Color = "bg-blue-500",
                Members = new List<string> { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "–ò–≤–∞–Ω –ö–æ–∑–ª–æ–≤" },
                TaskCount = 7,
                CreatedDate = DateTime.Now.AddDays(-30)
            },
            new Project
            {
                Id = "project-2",
                Name = "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                Description = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ iOS –∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                Icon = "üì±",
                Color = "bg-green-500",
                Members = new List<string> { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                TaskCount = 12,
                CreatedDate = DateTime.Now.AddDays(-15)
            },
            new Project
            {
                Id = "project-3",
                Name = "–î–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º–∞",
                Description = "UI/UX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –≥–∞–π–¥–ª–∞–π–Ω—ã",
                Icon = "üé®",
                Color = "bg-purple-500",
                Members = new List<string> { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞" },
                TaskCount = 5,
                CreatedDate = DateTime.Now.AddDays(-7)
            }
        };
    }
    
    private void InitializeKanbanData()
    {
        kanbanColumns = new List<KanbanColumn>
        {
            new KanbanColumn
            {
                Id = "todo",
                Title = "To Do",
                Tasks = new List<KanbanTask>()
            },
            new KanbanColumn
            {
                Id = "inprogress",
                Title = "In Progress",
                Tasks = new List<KanbanTask>()
            },
            new KanbanColumn
            {
                Id = "done",
                Title = "Done",
                Tasks = new List<KanbanTask>()
            }
        };
    }
    
    private void LoadProjectTasks()
    {
        if (selectedProject?.Id == "project-1")
        {
            // –ó–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            kanbanColumns.First(c => c.Id == "todo").Tasks = new List<KanbanTask>
            {
                new KanbanTask
                {
                    Id = "1",
                    Title = "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                    Description = "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Figma —Å —É—á–µ—Ç–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö UX –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤",
                    Tags = new List<string> { "Design", "Frontend", "Urgent" },
                    Assignees = new List<string> { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞" },
                    DueDate = DateTime.Now.AddDays(3),
                    ColumnId = "todo"
                },
                new KanbanTask
                {
                    Id = "2",
                    Title = "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD pipeline",
                    Description = "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–µ–ø–ª–æ—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    Tags = new List<string> { "Backend", "DevOps" },
                    Assignees = new List<string> { "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                    DueDate = DateTime.Now.AddDays(5),
                    ColumnId = "todo"
                }
            };
            
            kanbanColumns.First(c => c.Id == "inprogress").Tasks = new List<KanbanTask>
            {
                new KanbanTask
                {
                    Id = "4",
                    Title = "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
                    Description = "JWT —Ç–æ–∫–µ–Ω—ã, refresh tokens, —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    Tags = new List<string> { "Backend", "Feature" },
                    Assignees = new List<string> { "–ò–≤–∞–Ω –ö–æ–∑–ª–æ–≤", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                    DueDate = DateTime.Now.AddDays(2),
                    ColumnId = "inprogress"
                }
            };
            
            kanbanColumns.First(c => c.Id == "done").Tasks = new List<KanbanTask>
            {
                new KanbanTask
                {
                    Id = "6",
                    Title = "–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                    Description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL, –º–∏–≥—Ä–∞—Ü–∏–∏",
                    Tags = new List<string> { "Backend", "Database" },
                    Assignees = new List<string> { "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                    ColumnId = "done"
                }
            };
        }
        else
        {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            foreach (var column in kanbanColumns)
            {
                column.Tasks.Clear();
            }
        }
        
        UpdateProjectTaskCounts();
    }
    
    private void UpdateProjectTaskCounts()
    {
        if (selectedProject != null)
        {
            var totalTasks = kanbanColumns.Sum(c => c.Tasks.Count);
            selectedProject.TaskCount = totalTasks;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
            var projectInList = availableProjects.FirstOrDefault(p => p.Id == selectedProject.Id);
            if (projectInList != null)
            {
                projectInList.TaskCount = totalTasks;
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    private void HandleProjectSelected(Project project)
    {
        Console.WriteLine($"üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project.Name}");
        selectedProject = project;
        LoadProjectTasks();
        StateHasChanged();
    }
    
    private void HandleCreateProject()
    {
        Console.WriteLine("‚ûï –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞");
        isCreateProjectModalVisible = true;
    }
    
    private void HandleCloseProjectModal()
    {
        isCreateProjectModalVisible = false;
    }
    
    private void HandleProjectCreated(Project newProject)
    {
        Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {newProject.Name}");
        availableProjects.Add(newProject);
        selectedProject = newProject;
        LoadProjectTasks();
        StateHasChanged();
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Header –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    private void HandleAddTask()
    {
        Console.WriteLine("üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
        isCreateModalVisible = true;
    }
    
    private void HandleSearch(string searchQuery)
    {
        Console.WriteLine($"–ü–æ–∏—Å–∫: {searchQuery}");
    }
    
    private void HandleLogout()
    {
        NavigationManager.NavigateTo("/login");
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    private void HandleCloseCreateModal()
    {
        Console.WriteLine("üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
        isCreateModalVisible = false;
    }
    
    private async void HandleTaskCreated(KanbanTask newTask)
    {
        Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {newTask.Title}");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (To Do)
        var todoColumn = kanbanColumns.FirstOrDefault(c => c.Id == "todo");
        if (todoColumn != null)
        {
            todoColumn.Tasks.Add(newTask);
            Console.WriteLine($"üìã –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫—É '{todoColumn.Title}'. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {todoColumn.Tasks.Count}");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ
            UpdateProjectTaskCounts();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            StateHasChanged();
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            if (kanbanBoardRef != null)
            {
                Console.WriteLine("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...");
                await kanbanBoardRef.RefreshDragAndDrop();
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è KanbanBoard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    private void HandleTaskClick(KanbanTask task)
    {
        Console.WriteLine($"–ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ: {task.Title}");
    }
    
    private void HandleAddTaskToColumn(string columnId)
    {
        Console.WriteLine($"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫—É: {columnId}");
        // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏
        isCreateModalVisible = true;
    }
    
    private void HandleAddColumn()
    {
        Console.WriteLine("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏");
    }
    
    private void HandleTaskMoved(TaskMovedEventArgs eventArgs)
    {
        try
        {
            // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
            var sourceColumn = kanbanColumns.FirstOrDefault(c => c.Id == eventArgs.FromColumnId);
            var task = sourceColumn?.Tasks.FirstOrDefault(t => t.Id == eventArgs.TaskId);
            
            if (task != null && sourceColumn != null)
            {
                // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
                sourceColumn.Tasks.Remove(task);
                
                // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                var targetColumn = kanbanColumns.FirstOrDefault(c => c.Id == eventArgs.ToColumnId);
                if (targetColumn != null)
                {
                    task.ColumnId = eventArgs.ToColumnId;
                    targetColumn.Tasks.Add(task);
                    
                    Console.WriteLine($"–ó–∞–¥–∞—á–∞ '{task.Title}' –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∏–∑ '{eventArgs.FromColumnId}' –≤ '{eventArgs.ToColumnId}'");
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {ex.Message}");
        }
    }
}

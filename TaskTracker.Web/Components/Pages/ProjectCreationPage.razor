@page "/projects"
@using TaskTracker.Models
@using TaskTracker.Models.DTOs
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject OrganizationService OrganizationService
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<div class="w-screen h-screen flex bg-gray-50">
    <!-- Боковая панель с организациями и проектами -->
    <div class="sidebar-fixed bg-white shadow-lg border-r border-gray-200 @(isMobileMenuOpen ? "" : "sidebar-hidden lg:transform-none")">
        <ProjectSidebar Organizations="availableOrganizations"
            Projects="availableProjects"
            SelectedProject="selectedProject"
            UserName="@currentUserName"
            UserEmail="@currentUserEmail"
            OnProjectSelected="HandleProjectSelected"
            OnCreateProject="HandleCreateProject"
            OnCreateOrganization="HandleCreateOrganization"
            OnCloseMobile="HandleCloseMobileMenu"
            OnLogout="HandleLogout" />
    </div>

    <!-- Оверлей для мобильных устройств -->
    @if (isMobileMenuOpen)
    {
        <div class="fixed inset-0 z-40 lg:hidden">
            <div class="fixed inset-0 bg-gray-600 bg-opacity-75" @onclick="HandleCloseMobileMenu"></div>
        </div>
    }

    <!-- Основная часть (Main Content) -->
    <main class="main-with-sidebar flex-1 w-full h-full flex flex-col">
        <!-- Мобильная панель навигации -->
        <div class="lg:hidden bg-white border-b border-gray-200 p-4">
            <div class="flex items-center justify-between">
                <button @onclick="HandleToggleMobileMenu"
                        class="p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                </button>
                <div class="flex-1 text-center">
                    <h1 class="text-lg font-semibold text-gray-900">
                        @(selectedProject?.Name ?? "TaskTracker")
                    </h1>
                </div>
                <div class="w-10 h-10"></div> <!-- Балансировка для центрирования -->
            </div>
        </div>

        @if (selectedProject != null)
        {
            <!-- Используем компонент Header -->
            <Header ProjectName="@selectedProject.Name"
                ProjectDescription="@selectedProject.Description"
                UserName="@currentUserName"
                UserEmail="@currentUserEmail"
                OnAddTaskClick="HandleAddTask"
                OnSearchChanged="HandleSearch"
                OnLogoutClick="HandleLogout" />

            <!-- Контент страницы с горизонтальной прокруткой -->
            <div class="flex-1 overflow-hidden">
                <div class="h-full overflow-x-auto overflow-y-hidden" style="max-width: 100vw;">
                    <div class="flex space-x-6 p-6 h-full" style="width: max-content; min-width: 100%;">
                        <!-- Используем компонент KanbanBoard -->
                        <KanbanBoard @ref="kanbanBoardRef"
                            Columns="kanbanColumns"
                            OnTaskClick="HandleTaskClick"
                            OnAddTaskToColumn="HandleAddTaskToColumn"
                            OnAddColumn="HandleAddColumn"
                            OnTaskMoved="HandleTaskMoved" />
                    </div>
                </div>
            </div>
        }
        else if (!availableOrganizations.Any())
        {
            <!-- Экран создания первой организации -->
            <div class="flex-1 flex items-center justify-center p-4">
                <div class="text-center max-w-md mx-auto">
                    <div class="w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-10 h-10 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                        </svg>
                    </div>
                    <h2 class="text-2xl font-semibold text-gray-900 mb-2">Добро пожаловать в TaskTracker!</h2>
                    <p class="text-gray-600 mb-6">
                        Создайте организацию для группировки проектов и управления командой.
                    </p>
                    <button @onclick="HandleCreateOrganization"
                            class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-lg font-medium">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Создать организацию
                    </button>
                </div>
            </div>
        }
        else
        {
            <!-- Экран выбора проекта -->
            <div class="flex-1 flex items-center justify-center p-4">
                <div class="text-center max-w-md mx-auto">
                    <div class="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z"></path>
                        </svg>
                    </div>
                    <h2 class="text-xl font-semibold text-gray-900 mb-2">Выберите проект</h2>
                    <p class="text-gray-600 mb-6">
                        Выберите проект из боковой панели или создайте новый в одной из ваших организаций.
                    </p>
                </div>
            </div>
        }
    </main>
</div>

<!-- Модальное окно создания задачи -->
<TaskCreateModal IsVisible="isCreateModalVisible"
    OnClose="HandleCloseCreateModal"
    OnTaskCreated="HandleTaskCreated" />

<!-- Модальное окно создания проекта -->
<ProjectCreateModal IsVisible="isCreateProjectModalVisible"
    OrganizationId="@selectedOrganizationIdForNewProject"
    OnClose="HandleCloseProjectModal"
    OnProjectCreated="HandleProjectCreated" />

<!-- Модальное окно создания организации -->
<OrganizationCreateModal IsVisible="isCreateOrganizationModalVisible"
    OnClose="HandleCloseOrganizationModal"
    OnOrganizationCreated="HandleOrganizationCreated" />

<!-- Модальное окно создания колонки -->
<ColumnCreateModal IsVisible="isCreateColumnModalVisible"
    ProjectId="@(selectedProject?.Id ?? "")"
    MaxOrder="@kanbanColumns.Count"
    OnClose="HandleCloseColumnModal"
    OnColumnCreated="HandleColumnCreated" />

@code {
    // Данные организаций
    private List<Organization> availableOrganizations = new();
    
    // Данные проектов из API
    private List<Project> availableProjects = new();
    private Project? selectedProject = null;

    // Данные для Kanban доски из API
    private List<KanbanColumn> kanbanColumns = new();

    // Состояние модальных окон
    private bool isCreateModalVisible = false;
    private bool isCreateProjectModalVisible = false;
    private bool isCreateOrganizationModalVisible = false;
    private bool isCreateColumnModalVisible = false;

    // Мобильное меню
    private bool isMobileMenuOpen = false;

    // Пользовательские данные
    private string currentUserName = "";
    private string currentUserEmail = "";

    // ID организации для создания нового проекта
    private string selectedOrganizationIdForNewProject = "";

    // Ссылка на компонент KanbanBoard для переинициализации drag-and-drop
    private KanbanBoard? kanbanBoardRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDataAsync();
        await LoadOrganizationsAsync();
        await LoadProjectsAsync();

        // Автоматически выбираем первый проект, если он есть
        if (availableProjects.Any())
        {
            selectedProject = availableProjects.First();
            await LoadProjectColumnsAsync();
        }
    }

    private async Task LoadUserDataAsync()
    {
        var userData = await LocalStorage.GetUserDataAsync();
        if (userData.IsAuthenticated)
        {
            currentUserName = userData.Username ?? "Пользователь";
            currentUserEmail = userData.Email ?? "";
        }
        else
        {
            // Если пользователь не авторизован, перенаправляем на страницу входа
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadOrganizationsAsync()
    {
        try
        {
            availableOrganizations = await OrganizationService.GetUserOrganizationsAsync();
            Console.WriteLine($"🏢 Загружено {availableOrganizations.Count} организаций из API");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Ошибка загрузки организаций: {ex.Message}");
            availableOrganizations = new List<Organization>();
        }
    }

    private async Task LoadProjectsAsync()
    {
        try
        {
            var projects = await ApiService.GetUserProjectsAsync();
            availableProjects = projects.Select(MapProjectResponseToProject).ToList();
            Console.WriteLine($"📂 Загружено {availableProjects.Count} проектов из API");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Ошибка загрузки проектов: {ex.Message}");
            availableProjects = new List<Project>();
        }
    }

    private async Task LoadProjectColumnsAsync()
    {
        if (selectedProject == null) return;

        try
        {
            Console.WriteLine($"🔄 BLAZOR: Загрузка колонок для проекта {selectedProject.Id} ({selectedProject.Name})");
            
            var columns = await ApiService.GetProjectColumnsAsync(selectedProject.Id);
            kanbanColumns = columns.Select(MapColumnResponseToKanbanColumn).ToList();
            
            Console.WriteLine($"📋 BLAZOR: Загружено {kanbanColumns.Count} колонок для проекта {selectedProject.Name}");
            
            // Диагностика - покажем все задачи что пришли из API
            foreach (var column in kanbanColumns)
            {
                Console.WriteLine($"📂 BLAZOR: Колонка '{column.Title}' (ID: {column.Id}) содержит {column.Tasks.Count} задач:");
                foreach (var task in column.Tasks)
                {
                    Console.WriteLine($"   📝 Задача: {task.Title} (ID: {task.Id}, ColumnId: {task.ColumnId})");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Ошибка загрузки колонок: {ex.Message}");
            // В случае ошибки показываем пустые колонки
            kanbanColumns = new List<KanbanColumn>();
        }
    }

    // Маппинг DTO в модели для компонентов
    private static Project MapProjectResponseToProject(ProjectResponse response)
    {
        return new Project
        {
            Id = response.Id,
            Name = response.Name,
            Description = response.Description,
            Icon = response.Icon,
            Color = response.Color,
            OrganizationId = response.OrganizationId,
            Members = response.Members.ToList(),
            TaskCount = response.TaskCount,
            CreatedDate = response.CreatedDate
        };
    }

    private static KanbanColumn MapColumnResponseToKanbanColumn(ColumnResponse response)
    {
        return new KanbanColumn
        {
            Id = response.Id,
            Title = response.Title,
            Tasks = response.Tasks.Select(MapTaskResponseToKanbanTask).ToList()
        };
    }

    private static KanbanTask MapTaskResponseToKanbanTask(TaskResponse response)
    {
        return new KanbanTask
        {
            Id = response.Id,
            Title = response.Title,
            Description = response.Description,
            Tags = response.Tags.ToList(),
            Assignees = response.Assignees.ToList(),
            DueDate = response.DueDate,
            ColumnId = response.ColumnId
        };
    }

    // Обратный маппинг для отправки в API
    private static CreateTaskRequest MapKanbanTaskToCreateRequest(KanbanTask task, string projectId)
    {
        return new CreateTaskRequest
        {
            Title = task.Title,
            Description = task.Description,
            Tags = task.Tags,
            Assignees = task.Assignees,
            DueDate = task.DueDate,
            ColumnId = task.ColumnId,
            ProjectId = projectId,
            Priority = TaskPriority.Medium
        };
    }

    // Обработчики событий для проектов
    private async void HandleProjectSelected(Project project)
    {
        Console.WriteLine($"🎯 Выбран проект: {project.Name}");
        selectedProject = project;
        await LoadProjectColumnsAsync();
        StateHasChanged();
    }

    private void HandleCloseProjectModal()
    {
        isCreateProjectModalVisible = false;
    }

    private async void HandleProjectCreated(Project newProject)
    {
        Console.WriteLine($"✅ Создан новый проект: {newProject.Name}");
        
        try
        {
            var createRequest = new CreateProjectRequest
            {
                Name = newProject.Name,
                Description = newProject.Description,
                Icon = newProject.Icon,
                Color = newProject.Color,
                OrganizationId = newProject.OrganizationId
            };

            var createdProject = await ApiService.CreateProjectAsync(createRequest);
            if (createdProject != null)
            {
                await LoadProjectsAsync(); // Перезагружаем список проектов
                selectedProject = availableProjects.FirstOrDefault(p => p.Id == createdProject.Id);
                await LoadProjectColumnsAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Ошибка создания проекта: {ex.Message}");
        }
    }

    // Обработчики событий для Header компонента
    private void HandleAddTask()
    {
        Console.WriteLine("🎯 Открываем модальное окно создания задачи");
        isCreateModalVisible = true;
    }

    private void HandleSearch(string searchQuery)
    {
        Console.WriteLine($"Поиск: {searchQuery}");
    }

    private async Task HandleLogout()
    {
        await LocalStorage.ClearAuthDataAsync();
        NavigationManager.NavigateTo("/login");
    }

    // Обработчики для модального окна создания задачи
    private void HandleCloseCreateModal()
    {
        Console.WriteLine("🚪 Закрываем модальное окно создания задачи");
        isCreateModalVisible = false;
    }

    private async void HandleTaskCreated(KanbanTask newTask)
    {
        if (selectedProject == null) return;

        Console.WriteLine($"✅ Создана новая задача: {newTask.Title}");

        try
        {
            // Находим первую колонку (To Do)
            var todoColumn = kanbanColumns.FirstOrDefault();
            if (todoColumn != null)
            {
                newTask.ColumnId = todoColumn.Id;
                var createRequest = MapKanbanTaskToCreateRequest(newTask, selectedProject.Id);
                
                var createdTask = await ApiService.CreateTaskAsync(createRequest);
                if (createdTask != null)
                {
                    // Перезагружаем колонки для обновления данных
                    await LoadProjectColumnsAsync();
                    StateHasChanged();

                    // Переинициализируем drag-and-drop для новых карточек
                    if (kanbanBoardRef != null)
                    {
                        Console.WriteLine("🔄 Переинициализация drag-and-drop для новой задачи...");
                        await kanbanBoardRef.RefreshDragAndDrop();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Ошибка создания задачи: {ex.Message}");
        }
    }

    // Обработчики событий для KanbanBoard компонента
    private void HandleTaskClick(KanbanTask task)
    {
        Console.WriteLine($"Клик по задаче: {task.Title}");
    }

    private void HandleAddTaskToColumn(string columnId)
    {
        Console.WriteLine($"Добавление задачи в колонку: {columnId}");
        // Можно также открыть модальное окно для этой колонки
        isCreateModalVisible = true;
    }

    private void HandleAddColumn()
    {
        Console.WriteLine("➕ Открываем модальное окно создания колонки");
        isCreateColumnModalVisible = true;
    }

    // Обработчики для модального окна создания колонки
    private void HandleCloseColumnModal()
    {
        isCreateColumnModalVisible = false;
    }

    private async void HandleColumnCreated(KanbanColumn newColumn)
    {
        Console.WriteLine($"✅ Создана новая колонка: {newColumn.Title}");
        
        if (selectedProject == null) return;
        
        try
        {
            // Создаем запрос для API
            var createRequest = new CreateColumnRequest
            {
                Title = newColumn.Title,
                ProjectId = selectedProject.Id,
                Order = newColumn.Order
            };

            Console.WriteLine($"📤 Отправляем запрос создания колонки в API для проекта: {selectedProject.Id}");
            
            // Отправляем запрос в API
            var createdColumn = await ApiService.CreateColumnAsync(createRequest);
            
            if (createdColumn != null)
            {
                Console.WriteLine($"✅ Колонка успешно создана в API: {createdColumn.Title} (ID: {createdColumn.Id})");
                
                // Перезагружаем колонки для обновления данных
                await LoadProjectColumnsAsync();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"❌ API вернул null при создании колонки {newColumn.Title}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Ошибка создания колонки: {ex.Message}");
        }
    }

    // Обработчики для организаций
    private void HandleCreateOrganization()
    {
        Console.WriteLine("🏢 Открываем модальное окно создания организации");
        isCreateOrganizationModalVisible = true;
    }

    private void HandleCloseOrganizationModal()
    {
        isCreateOrganizationModalVisible = false;
    }

    private async void HandleOrganizationCreated(Organization newOrganization)
    {
        Console.WriteLine($"✅ Создана новая организация: {newOrganization.Name}");
        
        try
        {
            var createRequest = new CreateOrganizationRequest
            {
                Name = newOrganization.Name,
                Description = newOrganization.Description,
                Icon = newOrganization.Icon,
                Color = newOrganization.Color
            };

            var createdOrganization = await OrganizationService.CreateOrganizationAsync(createRequest);
            if (createdOrganization != null)
            {
                await LoadOrganizationsAsync(); // Перезагружаем список организаций
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Ошибка создания организации: {ex.Message}");
        }
    }

    // Обработчики для создания проекта с организацией
    private void HandleCreateProject(string organizationId)
    {
        Console.WriteLine($"➕ Открываем модальное окно создания проекта для организации: {organizationId}");
        selectedOrganizationIdForNewProject = organizationId;
        isCreateProjectModalVisible = true;
    }

    // Обработчики для мобильного меню
    private void HandleToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
        StateHasChanged();
    }

    private void HandleCloseMobileMenu()
    {
        isMobileMenuOpen = false;
        StateHasChanged();
    }

    // Обработчик для перемещения задач
    private async Task HandleTaskMoved(TaskMovedEventArgs args)
    {
        Console.WriteLine($"🎯 BLAZOR: Получен запрос на перемещение задачи {args.TaskId} из {args.FromColumnId} в {args.ToColumnId}");
        
        try
        {
            // Создаем запрос перемещения
            var moveRequest = new MoveTaskRequest
            {
                NewColumnId = args.ToColumnId,
                NewOrder = 0 // Пока используем простой порядок
            };

            Console.WriteLine($"📤 BLAZOR: Отправляем запрос перемещения в API - TaskId: {args.TaskId}, NewColumnId: {args.ToColumnId}");
            
            // Отправляем запрос в API
            var movedTask = await ApiService.MoveTaskAsync(args.TaskId, moveRequest);
            
            if (movedTask != null)
            {
                Console.WriteLine($"✅ BLAZOR: Задача успешно перемещена в API: {movedTask.Title} -> ColumnId: {movedTask.ColumnId}");
                
                // Перезагружаем данные для синхронизации с сервером
                await LoadProjectColumnsAsync();
                StateHasChanged();

                // Переинициализируем drag-and-drop
                if (kanbanBoardRef != null)
                {
                    await kanbanBoardRef.RefreshDragAndDrop();
                }
            }
            else
            {
                Console.WriteLine($"❌ BLAZOR: API вернул null при перемещении задачи {args.TaskId}");
                // В случае ошибки перезагружаем данные для отката изменений
                await LoadProjectColumnsAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ BLAZOR: Ошибка при перемещении задачи: {ex.Message}");
            // В случае ошибки перезагружаем данные для отката изменений
            await LoadProjectColumnsAsync();
            StateHasChanged();
        }
    }
}

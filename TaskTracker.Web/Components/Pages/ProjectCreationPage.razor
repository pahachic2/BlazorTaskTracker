@page "/projects"
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@using TaskTracker.Web.Components.Layout
@using TaskTracker.Models.DTOs
@using TaskTracker.Models

<div class="flex h-screen bg-gray-50">
    <!-- –ù–æ–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ -->
    <ProjectSidebar Projects="availableProjects"
        SelectedProject="selectedProject"
        UserName="@currentUserName"
        UserEmail="@currentUserEmail"
        OnProjectSelected="HandleProjectSelected"
        OnCreateProject="HandleCreateProject"
        OnLogout="HandleLogout" />

    <!-- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (Main Content) -->
    <main class="flex-1 flex flex-col overflow-hidden">
        @if (selectedProject != null)
        {
            <!-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Header -->
            <Header ProjectName="@selectedProject.Name"
                ProjectDescription="@selectedProject.Description"
                UserName="@currentUserName"
                UserEmail="@currentUserEmail"
                OnAddTaskClick="HandleAddTask"
                OnSearchChanged="HandleSearch"
                OnLogoutClick="HandleLogout" />

            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
            <div class="flex-1 overflow-hidden">
                <!-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç KanbanBoard -->
                <KanbanBoard @ref="kanbanBoardRef"
                    Columns="kanbanColumns"
                    OnTaskClick="HandleTaskClick"
                    OnAddTaskToColumn="HandleAddTaskToColumn"
                    OnAddColumn="HandleAddColumn"
                    OnTaskMoved="HandleTaskMoved" />
            </div>
        }
        else
        {
            <!-- –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ -->
            <div class="flex-1 flex items-center justify-center">
                <div class="text-center max-w-md mx-auto">
                    <div class="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z">
                            </path>
                        </svg>
                    </div>
                    <h2 class="text-2xl font-semibold text-gray-900 mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskTracker!</h2>
                    <p class="text-gray-600 mb-6">
                        –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏.
                    </p>
                    @if (!availableProjects.Any())
                    {
                        <button @onclick="HandleCreateProject"
                                class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round"
                                      stroke-linejoin="round"
                                      stroke-width="2"
                                      d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
                        </button>
                    }
                </div>
            </div>
        }
    </main>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ -->
<TaskCreateModal IsVisible="isCreateModalVisible"
    OnClose="HandleCloseCreateModal"
    OnTaskCreated="HandleTaskCreated" />

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ -->
<ColumnCreateModal IsVisible="isCreateColumnModalVisible"
    ProjectId="@(selectedProject?.Id ?? "")"
    OnClose="HandleCloseColumnModal"
    OnColumnCreated="HandleColumnCreated" />

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ -->
<ProjectCreateModal IsVisible="isCreateProjectModalVisible"
    OnClose="HandleCloseProjectModal"
    OnProjectCreated="HandleProjectCreated" />

@code {
    // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ API
    private List<Project> availableProjects = new();
    private Project? selectedProject = null;

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è Kanban –¥–æ—Å–∫–∏ –∏–∑ API
    private List<KanbanColumn> kanbanColumns = new();

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    private bool isCreateModalVisible = false;
    private bool isCreateProjectModalVisible = false;
    private bool isCreateColumnModalVisible = false;

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    private string currentUserName = "";
    private string currentUserEmail = "";

    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç KanbanBoard –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop
    private KanbanBoard? kanbanBoardRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDataAsync();
        await LoadProjectsAsync();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (availableProjects.Any())
        {
            selectedProject = availableProjects.First();
            await LoadProjectColumnsAsync();
        }
    }

    private async Task LoadUserDataAsync()
    {
        var userData = await LocalStorage.GetUserDataAsync();
        if (userData.IsAuthenticated)
        {
            currentUserName = userData.Username ?? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
            currentUserEmail = userData.Email ?? "";
        }
        else
        {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadProjectsAsync()
    {
        try
        {
            var projects = await ApiService.GetUserProjectsAsync();
            availableProjects = projects.Select(MapProjectResponseToProject).ToList();
            Console.WriteLine($"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {availableProjects.Count} –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ API");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {ex.Message}");
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            availableProjects = new List<Project>();
        }
    }

    private async Task LoadProjectColumnsAsync()
    {
        if (selectedProject == null) return;

        try
        {
            var columns = await ApiService.GetProjectColumnsAsync(selectedProject.Id);
            kanbanColumns = columns.Select(MapColumnResponseToKanbanColumn).ToList();
            Console.WriteLine($"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {kanbanColumns.Count} –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {selectedProject.Name}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–æ–Ω–æ–∫: {ex.Message}");
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            kanbanColumns = new List<KanbanColumn>();
        }
    }

    // –ú–∞–ø–ø–∏–Ω–≥ DTO –≤ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    private static Project MapProjectResponseToProject(ProjectResponse response)
    {
        return new Project
        {
            Id = response.Id,
            Name = response.Name,
            Description = response.Description,
            Icon = response.Icon,
            Color = response.Color,
            Members = response.Members.ToList(),
            TaskCount = response.TaskCount,
            CreatedDate = response.CreatedDate
        };
    }

    private static KanbanColumn MapColumnResponseToKanbanColumn(ColumnResponse response)
    {
        return new KanbanColumn
        {
            Id = response.Id,
            Title = response.Title,
            Tasks = response.Tasks.Select(MapTaskResponseToKanbanTask).ToList()
        };
    }

    private static KanbanTask MapTaskResponseToKanbanTask(TaskResponse response)
    {
        return new KanbanTask
        {
            Id = response.Id,
            Title = response.Title,
            Description = response.Description,
            Tags = response.Tags.ToList(),
            Assignees = response.Assignees.ToList(),
            DueDate = response.DueDate,
            ColumnId = response.ColumnId
        };
    }

    // –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
    private static CreateTaskRequest MapKanbanTaskToCreateRequest(KanbanTask task, string projectId)
    {
        return new CreateTaskRequest
        {
            Title = task.Title,
            Description = task.Description,
            Tags = task.Tags,
            Assignees = task.Assignees,
            DueDate = task.DueDate,
            ColumnId = task.ColumnId,
            ProjectId = projectId,
            Priority = TaskPriority.Medium
        };
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    private async void HandleProjectSelected(Project project)
    {
        Console.WriteLine($"üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project.Name}");
        selectedProject = project;
        await LoadProjectColumnsAsync();
        StateHasChanged();
    }

    private void HandleCreateProject()
    {
        Console.WriteLine("‚ûï –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞");
        isCreateProjectModalVisible = true;
    }

    private void HandleCloseProjectModal()
    {
        isCreateProjectModalVisible = false;
    }

    private async void HandleProjectCreated(Project newProject)
    {
        Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {newProject.Name}");
        
        try
        {
            var createRequest = new CreateProjectRequest
            {
                Name = newProject.Name,
                Description = newProject.Description,
                Icon = newProject.Icon,
                Color = newProject.Color
            };

            var createdProject = await ApiService.CreateProjectAsync(createRequest);
            if (createdProject != null)
            {
                await LoadProjectsAsync(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
                selectedProject = availableProjects.FirstOrDefault(p => p.Id == createdProject.Id);
                await LoadProjectColumnsAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Header –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    private void HandleAddTask()
    {
        Console.WriteLine("üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
        isCreateModalVisible = true;
    }

    private void HandleSearch(string searchQuery)
    {
        Console.WriteLine($"–ü–æ–∏—Å–∫: {searchQuery}");
    }

    private async Task HandleLogout()
    {
        await LocalStorage.ClearAuthDataAsync();
        NavigationManager.NavigateTo("/login");
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    private void HandleCloseCreateModal()
    {
        Console.WriteLine("üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
        isCreateModalVisible = false;
    }

    private async void HandleTaskCreated(KanbanTask newTask)
    {
        if (selectedProject == null) return;

        Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {newTask.Title}");

        try
        {
            // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (To Do)
            var todoColumn = kanbanColumns.FirstOrDefault();
            if (todoColumn != null)
            {
                newTask.ColumnId = todoColumn.Id;
                var createRequest = MapKanbanTaskToCreateRequest(newTask, selectedProject.Id);
                
                var createdTask = await ApiService.CreateTaskAsync(createRequest);
                if (createdTask != null)
                {
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    await LoadProjectColumnsAsync();
                    StateHasChanged();

                    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                    if (kanbanBoardRef != null)
                    {
                        Console.WriteLine("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...");
                        await Task.Delay(300); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                        await kanbanBoardRef.RefreshDragAndDrop();
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                        _ = Task.Run(async () =>
                        {
                            await Task.Delay(1000);
                            await kanbanBoardRef.RefreshDragAndDrop();
                            Console.WriteLine("üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {ex.Message}");
        }
    }

    private void HandleAddColumn()
    {
        Console.WriteLine("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏");
        if (selectedProject == null)
        {
            Console.WriteLine("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏");
            return;
        }
        
        Console.WriteLine($"üìã –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {selectedProject.Name}");
        isCreateColumnModalVisible = true;
    }

    private void HandleCloseColumnModal()
    {
        isCreateColumnModalVisible = false;
    }

    private async void HandleColumnCreated(CreateColumnRequest columnRequest)
    {
        if (selectedProject == null) return;

        Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É: {columnRequest.Title}");

        try
        {
            var createdColumn = await ApiService.CreateColumnAsync(columnRequest);
            if (createdColumn != null)
            {
                Console.WriteLine($"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{createdColumn.Title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                await LoadProjectColumnsAsync();
                StateHasChanged();

                // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                if (kanbanBoardRef != null)
                {
                    Console.WriteLine("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏...");
                    await Task.Delay(300); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    await kanbanBoardRef.RefreshDragAndDrop();
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                    _ = Task.Run(async () =>
                    {
                        await Task.Delay(1000);
                        await kanbanBoardRef.RefreshDragAndDrop();
                        Console.WriteLine("üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
                    });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: {ex.Message}");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è KanbanBoard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    private void HandleTaskClick(KanbanTask task)
    {
        Console.WriteLine($"–ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ: {task.Title}");
    }

    private void HandleAddTaskToColumn(string columnId)
    {
        Console.WriteLine($"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫—É: {columnId}");
        // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏
        isCreateModalVisible = true;
    }

    private async void HandleTaskMoved(TaskMovedEventArgs eventArgs)
    {
        Console.WriteLine($"üéØ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {eventArgs.TaskId} –∏–∑ {eventArgs.FromColumnId} –≤ {eventArgs.ToColumnId}");
        
        try
        {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ API
            var moveRequest = new MoveTaskRequest
            {
                NewColumnId = eventArgs.ToColumnId,
                NewOrder = 0 // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
            };

            Console.WriteLine($"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API...");
            var movedTask = await ApiService.MoveTaskAsync(eventArgs.TaskId, moveRequest);
            
            if (movedTask != null)
            {
                Console.WriteLine($"‚úÖ –ó–∞–¥–∞—á–∞ '{movedTask.Title}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ API");
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                await LoadProjectColumnsAsync();
                StateHasChanged();
                
                // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop
                if (kanbanBoardRef != null)
                {
                    await Task.Delay(200); // –î–∞–µ–º –≤—Ä–µ–º—è UI –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                    await kanbanBoardRef.RefreshDragAndDrop();
                }
                
                Console.WriteLine($"‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è");
            }
            else
            {
                Console.WriteLine("‚ùå API –≤–µ—Ä–Ω—É–ª null - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å");
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                await LoadProjectColumnsAsync();
                StateHasChanged();
                
                if (kanbanBoardRef != null)
                {
                    await Task.Delay(200);
                    await kanbanBoardRef.RefreshDragAndDrop();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {ex.Message}");
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            Console.WriteLine("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...");
            await LoadProjectColumnsAsync();
            StateHasChanged();
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            if (kanbanBoardRef != null)
            {
                await Task.Delay(200); // –î–∞–µ–º –≤—Ä–µ–º—è UI –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                await kanbanBoardRef.RefreshDragAndDrop();
            }
        }
    }
}

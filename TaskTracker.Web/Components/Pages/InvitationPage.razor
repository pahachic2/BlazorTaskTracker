@page "/invitations/{token}"
@using TaskTracker.Models
@using TaskTracker.Models.DTOs
@using TaskTracker.Web.Components.Modals
@inject OrganizationInvitationService InvitationService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

@* Страница обработки приглашения *@

<div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <!-- Логотип -->
        <div class="flex justify-center">
            <div class="w-16 h-16 bg-blue-600 rounded-xl flex items-center justify-center">
                <span class="text-white font-bold text-xl">T</span>
            </div>
        </div>
        
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Приглашение в организацию
        </h2>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            
            @if (isLoading)
            {
                <!-- Состояние загрузки -->
                <div class="text-center">
                    <svg class="animate-spin mx-auto h-12 w-12 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <p class="mt-4 text-gray-600">Проверяем приглашение...</p>
                </div>
            }
            else if (invitationInfo == null)
            {
                <!-- Ошибка загрузки -->
                <div class="text-center">
                    <svg class="mx-auto h-12 w-12 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.862-.833-2.632 0L4.168 16.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">Ошибка</h3>
                    <p class="mt-1 text-sm text-gray-500">Не удалось загрузить информацию о приглашении</p>
                    <div class="mt-6">
                        <button @onclick="ReturnToHome" 
                                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                            Вернуться на главную
                        </button>
                    </div>
                </div>
            }
            else if (!invitationInfo.IsValid)
            {
                <!-- Недействительное приглашение -->
                <div class="text-center">
                    <svg class="mx-auto h-12 w-12 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">Приглашение недействительно</h3>
                    <p class="mt-1 text-sm text-gray-500">@invitationInfo.Message</p>
                    <div class="mt-6">
                        <button @onclick="ReturnToHome" 
                                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                            Вернуться на главную
                        </button>
                    </div>
                </div>
            }
            else
            {
                <!-- Действительное приглашение -->
                <div class="space-y-6">
                    <!-- Информация о приглашении -->
                    <div class="text-center">
                        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 mb-4">
                            <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                            </svg>
                        </div>
                        
                        <h3 class="text-lg font-medium text-gray-900">
                            Приглашение в организацию
                        </h3>
                        <p class="mt-1 text-sm text-gray-500">
                            @invitationInfo.InvitedByName приглашает вас присоединиться
                        </p>
                    </div>

                    <!-- Детали приглашения -->
                    <div class="bg-gray-50 px-4 py-5 sm:p-6 rounded-lg">
                        <dl class="space-y-3">
                            <div>
                                <dt class="text-sm font-medium text-gray-500">Организация</dt>
                                <dd class="mt-1 text-sm text-gray-900">@invitationInfo.OrganizationName</dd>
                            </div>
                            <div>
                                <dt class="text-sm font-medium text-gray-500">Роль</dt>
                                <dd class="mt-1">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetRoleCssClass(invitationInfo.Role ?? OrganizationRole.Member)">
                                        @InvitationService.GetRoleDisplayName(invitationInfo.Role ?? OrganizationRole.Member)
                                    </span>
                                </dd>
                            </div>
                            <div>
                                <dt class="text-sm font-medium text-gray-500">Срок действия</dt>
                                <dd class="mt-1 text-sm text-gray-900">
                                    До @(invitationInfo.ExpiresAt?.ToString("dd.MM.yyyy HH:mm") ?? "неизвестно")
                                </dd>
                            </div>
                        </dl>
                    </div>

                    @if (invitationInfo.RequiresRegistration)
                    {
                        <!-- Форма регистрации -->
                        <div class="space-y-4">
                            <div class="border-t border-gray-200 pt-6">
                                <h4 class="text-base font-medium text-gray-900 mb-4">
                                    Создайте аккаунт для принятия приглашения
                                </h4>
                                
                                <EditForm Model="@acceptModel" OnValidSubmit="@HandleAccept">
                                    <DataAnnotationsValidator />
                                    
                                    <div class="space-y-4">
                                        <div>
                                            <label for="username" class="block text-sm font-medium text-gray-700">
                                                Имя пользователя *
                                            </label>
                                            <InputText id="username" @bind-Value="acceptModel.Username" 
                                                     class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                     placeholder="Введите имя пользователя" />
                                            <ValidationMessage For="@(() => acceptModel.Username)" class="text-red-600 text-sm mt-1" />
                                        </div>

                                        <div>
                                            <label for="password" class="block text-sm font-medium text-gray-700">
                                                Пароль *
                                            </label>
                                            <InputText id="password" type="password" @bind-Value="acceptModel.Password" 
                                                     class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                     placeholder="Введите пароль" />
                                            <ValidationMessage For="@(() => acceptModel.Password)" class="text-red-600 text-sm mt-1" />
                                        </div>
                                    </div>

                                    <!-- Кнопки -->
                                    <div class="mt-6 flex space-x-3">
                                        <button type="submit"
                                                disabled="@isProcessing"
                                                class="flex-1 inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                                            @if (isProcessing)
                                            {
                                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                </svg>
                                                <span>Создание аккаунта...</span>
                                            }
                                            else
                                            {
                                                <span>Принять приглашение</span>
                                            }
                                        </button>
                                        <button type="button" 
                                                @onclick="HandleDecline"
                                                disabled="@isProcessing"
                                                class="flex-1 inline-flex justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                                            Отклонить
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Простые кнопки для зарегистрированного пользователя -->
                        <div class="flex space-x-3">
                            <button @onclick="@(() => HandleAccept(false))"
                                    disabled="@isProcessing"
                                    class="flex-1 inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                                @if (isProcessing)
                                {
                                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    <span>Обработка...</span>
                                }
                                else
                                {
                                    <span>Принять приглашение</span>
                                }
                            </button>
                            <button @onclick="HandleDecline"
                                    disabled="@isProcessing"
                                    class="flex-1 inline-flex justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                                Отклонить
                            </button>
                        </div>
                    }

                    <!-- Дополнительная информация -->
                    <div class="text-center">
                        <p class="text-xs text-gray-500">
                            TaskTracker - система управления проектами и задачами
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string Token { get; set; } = "";

    private InvitationInfoResponse? invitationInfo;
    private AcceptInvitationRequest acceptModel = new();
    private bool isLoading = true;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadInvitationInfoAsync();
    }

    private async Task LoadInvitationInfoAsync()
    {
        if (string.IsNullOrWhiteSpace(Token))
        {
            ReturnToHome();
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            invitationInfo = await InvitationService.GetInvitationInfoAsync(Token);
            
            if (invitationInfo != null)
            {
                acceptModel.Token = Token;
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleAccept()
    {
        await HandleAccept(true);
    }

    private async Task HandleAccept(bool requiresForm)
    {
        if (isProcessing) return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            if (!requiresForm)
            {
                acceptModel = new AcceptInvitationRequest { Token = Token };
            }

            var result = await InvitationService.AcceptInvitationAsync(acceptModel);
            
            if (result?.Success == true)
            {
                // Очищаем кеш участников (новый пользователь присоединился)
                TaskCreateModal.ClearMembersCache();

                // Если получен JWT токен, сохраняем его и авторизуем пользователя
                if (!string.IsNullOrEmpty(result.Token))
                {
                    await LocalStorage.SetAuthTokenAsync(result.Token);
                    await LocalStorage.SetUserDataAsync(result.UserId ?? "User", "");
                }

                // Перенаправляем в приложение
                NavigationManager.NavigateTo("/projects");
            }
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleDecline()
    {
        if (isProcessing) return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            var success = await InvitationService.DeclineInvitationAsync(Token);
            
            if (success)
            {
                // Показываем сообщение об успешном отклонении
                invitationInfo = new InvitationInfoResponse 
                { 
                    IsValid = false,
                    Message = "Приглашение успешно отклонено"
                };
                StateHasChanged();
                
                // Через 3 секунды перенаправляем на главную
                await Task.Delay(3000);
                ReturnToHome();
            }
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ReturnToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private string GetRoleCssClass(OrganizationRole role)
    {
        return role switch
        {
            OrganizationRole.Owner => "bg-purple-100 text-purple-800",
            OrganizationRole.Admin => "bg-blue-100 text-blue-800",
            OrganizationRole.Member => "bg-green-100 text-green-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
} 
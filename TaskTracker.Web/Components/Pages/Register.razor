@page "/register"
@using TaskTracker.Models.DTOs
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<PageTitle>Регистрация - TaskTracker</PageTitle>

<div class="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div class="text-center">
            <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0 0h3m-3 0h-3m-3-6V4a2 2 0 012-2h2a2 2 0 012 2v5M7 9V4a2 2 0 012-2h2a2 2 0 012 2v5m6 8a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <h2 class="text-3xl font-bold text-gray-900">Создать аккаунт</h2>
            <p class="mt-2 text-sm text-gray-600">
                Присоединяйтесь к TaskTracker для эффективного управления задачами
            </p>
        </div>

        <div class="bg-white shadow-lg rounded-lg p-8">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                    <div class="flex">
                        <svg class="w-5 h-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                        </svg>
                        <p class="ml-3 text-sm text-red-700">@errorMessage</p>
                    </div>
                </div>
            }
            
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                    <div class="flex">
                        <svg class="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                        </svg>
                        <p class="ml-3 text-sm text-green-700">@successMessage</p>
                    </div>
                </div>
            }

            <EditForm Model="registerRequest" OnValidSubmit="HandleRegister" class="space-y-6">
                <DataAnnotationsValidator />
                
                <div>
                    <label for="username" class="block text-sm font-medium text-gray-700 mb-1">
                        Имя пользователя
                    </label>
                    <InputText id="username" 
                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                              @bind-Value="registerRequest.Username" 
                              placeholder="Введите имя пользователя" />
                    <ValidationMessage For="@(() => registerRequest.Username)" class="mt-1 text-sm text-red-600" />
                </div>
                
                <div>
                    <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
                        Email адрес
                    </label>
                    <InputText id="email" 
                              type="email" 
                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                              @bind-Value="registerRequest.Email" 
                              placeholder="Введите email адрес" />
                    <ValidationMessage For="@(() => registerRequest.Email)" class="mt-1 text-sm text-red-600" />
                </div>
                
                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
                        Пароль
                    </label>
                    <InputText id="password" 
                              type="password" 
                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                              @bind-Value="registerRequest.Password" 
                              placeholder="Введите пароль" />
                    <ValidationMessage For="@(() => registerRequest.Password)" class="mt-1 text-sm text-red-600" />
                </div>
                
                <button type="submit" 
                        class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" 
                        disabled="@isLoading">
                    @if (isLoading)
                    {
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Создание аккаунта...</span>
                    }
                    else
                    {
                        <span>Создать аккаунт</span>
                    }
                </button>
            </EditForm>
            
            <div class="mt-6 text-center">
                <p class="text-sm text-gray-600">
                    Уже есть аккаунт?
                    <a href="/login" class="font-medium text-blue-600 hover:text-blue-500 transition-colors">
                        Войти
                    </a>
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/register", registerRequest);
            
            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                
                if (authResponse != null)
                {
                    // Сохраняем данные авторизации через сервис
                    await LocalStorage.SetAuthTokenAsync(authResponse.Token);
                    await LocalStorage.SetUserDataAsync(authResponse.Username, registerRequest.Email);
                    
                    successMessage = "Регистрация прошла успешно! Перенаправление...";
                    
                    // Перенаправляем на главную страницу через 2 секунды
                    await Task.Delay(2000);
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = "Ошибка регистрации. Возможно, пользователь с таким именем или email уже существует.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
} 
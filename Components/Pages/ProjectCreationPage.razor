@page "/"
@page "/projects"
@inject NavigationManager NavigationManager
@using BlazorTaskTracker.Components.Layout
@using BlazorTaskTracker.Models

<div class="flex h-screen bg-gray-50">
    <!-- –õ–µ–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (Sidebar) -->
    <aside class="w-20 bg-white shadow-lg flex flex-col items-center py-4">
        <!-- –õ–æ–≥–æ—Ç–∏–ø/–ò–∫–æ–Ω–∫–∞ -->
        <div class="mb-8">
            <div class="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                <span class="text-white font-bold text-lg">T</span>
            </div>
        </div>
        
        <!-- –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ -->
        <nav class="flex flex-col space-y-4">
            <a href="#" class="w-12 h-12 bg-blue-100 text-blue-600 rounded-lg flex items-center justify-center hover:bg-blue-200 transition-colors">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z"></path>
                </svg>
            </a>
            
            <a href="#" class="w-12 h-12 text-gray-400 rounded-lg flex items-center justify-center hover:bg-gray-100 transition-colors">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                </svg>
            </a>
            
            <a href="#" class="w-12 h-12 text-gray-400 rounded-lg flex items-center justify-center hover:bg-gray-100 transition-colors">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
            </a>
        </nav>
        
        <!-- –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–∏–∑—É -->
        <div class="mt-auto">
            <div class="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                <span class="text-gray-600 font-medium text-sm">–ê</span>
            </div>
        </div>
    </aside>
    
    <!-- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (Main Content) -->
    <main class="flex-1 flex flex-col overflow-hidden">
        <!-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Header -->
        <Header ProjectName="TaskTracker Pro" 
                ProjectDescription="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ"
                UserName="–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
                UserEmail="anna@example.com"
                OnAddTaskClick="HandleAddTask"
                OnSearchChanged="HandleSearch"
                OnLogoutClick="HandleLogout" />
        
        <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
        <div class="flex-1 overflow-hidden">
            <!-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç KanbanBoard -->
            <KanbanBoard @ref="kanbanBoardRef" 
                        Columns="kanbanColumns" 
                        OnTaskClick="HandleTaskClick"
                        OnAddTaskToColumn="HandleAddTaskToColumn"
                        OnAddColumn="HandleAddColumn"
                        OnTaskMoved="HandleTaskMoved" />
        </div>
    </main>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ -->
<TaskCreateModal IsVisible="isCreateModalVisible" 
                 OnClose="HandleCloseCreateModal" 
                 OnTaskCreated="HandleTaskCreated" />

@code {
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è Kanban –¥–æ—Å–∫–∏
    private List<KanbanColumn> kanbanColumns = new();
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    private bool isCreateModalVisible = false;
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç KanbanBoard –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop
    private KanbanBoard? kanbanBoardRef;
    
    protected override void OnInitialized()
    {
        InitializeKanbanData();
    }
    
    private void InitializeKanbanData()
    {
        kanbanColumns = new List<KanbanColumn>
        {
            new KanbanColumn
            {
                Id = "todo",
                Title = "To Do",
                Tasks = new List<KanbanTask>
                {
                    new KanbanTask
                    {
                        Id = "1",
                        Title = "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                        Description = "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Figma —Å —É—á–µ—Ç–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö UX –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤",
                        Tags = new List<string> { "Design", "Frontend", "Urgent" },
                        Assignees = new List<string> { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞" },
                        DueDate = DateTime.Now.AddDays(3),
                        ColumnId = "todo"
                    },
                    new KanbanTask
                    {
                        Id = "2",
                        Title = "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD pipeline",
                        Description = "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–µ–ø–ª–æ—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                        Tags = new List<string> { "Backend", "DevOps" },
                        Assignees = new List<string> { "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                        DueDate = DateTime.Now.AddDays(5),
                        ColumnId = "todo"
                    },
                    new KanbanTask
                    {
                        Id = "3",
                        Title = "–ù–∞–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API",
                        Tags = new List<string> { "Backend", "Documentation" },
                        Assignees = new List<string> { "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞" },
                        DueDate = DateTime.Now.AddDays(7),
                        ColumnId = "todo"
                    }
                }
            },
            new KanbanColumn
            {
                Id = "inprogress",
                Title = "In Progress",
                Tasks = new List<KanbanTask>
                {
                    new KanbanTask
                    {
                        Id = "4",
                        Title = "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
                        Description = "JWT —Ç–æ–∫–µ–Ω—ã, refresh tokens, —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                        Tags = new List<string> { "Backend", "Feature" },
                        Assignees = new List<string> { "–ò–≤–∞–Ω –ö–æ–∑–ª–æ–≤", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                        DueDate = DateTime.Now.AddDays(2),
                        ColumnId = "inprogress"
                    },
                    new KanbanTask
                    {
                        Id = "5",
                        Title = "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤",
                        Tags = new List<string> { "Bug", "Frontend" },
                        Assignees = new List<string> { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞" },
                        DueDate = DateTime.Now.AddDays(1),
                        ColumnId = "inprogress"
                    }
                }
            },
            new KanbanColumn
            {
                Id = "done",
                Title = "Done",
                Tasks = new List<KanbanTask>
                {
                    new KanbanTask
                    {
                        Id = "6",
                        Title = "–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                        Description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL, –º–∏–≥—Ä–∞—Ü–∏–∏",
                        Tags = new List<string> { "Backend", "Database" },
                        Assignees = new List<string> { "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                        ColumnId = "done"
                    },
                    new KanbanTask
                    {
                        Id = "7",
                        Title = "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
                        Tags = new List<string> { "Setup" },
                        Assignees = new List<string> { "–ò–≤–∞–Ω –ö–æ–∑–ª–æ–≤" },
                        ColumnId = "done"
                    }
                }
            }
        };
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Header –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    private void HandleAddTask()
    {
        Console.WriteLine("üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
        isCreateModalVisible = true;
    }
    
    private void HandleSearch(string searchQuery)
    {
        Console.WriteLine($"–ü–æ–∏—Å–∫: {searchQuery}");
    }
    
    private void HandleLogout()
    {
        NavigationManager.NavigateTo("/login");
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    private void HandleCloseCreateModal()
    {
        Console.WriteLine("üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
        isCreateModalVisible = false;
    }
    
    private async void HandleTaskCreated(KanbanTask newTask)
    {
        Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {newTask.Title}");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (To Do)
        var todoColumn = kanbanColumns.FirstOrDefault(c => c.Id == "todo");
        if (todoColumn != null)
        {
            todoColumn.Tasks.Add(newTask);
            Console.WriteLine($"üìã –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫—É '{todoColumn.Title}'. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {todoColumn.Tasks.Count}");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            StateHasChanged();
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            if (kanbanBoardRef != null)
            {
                Console.WriteLine("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...");
                await kanbanBoardRef.RefreshDragAndDrop();
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è KanbanBoard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    private void HandleTaskClick(KanbanTask task)
    {
        Console.WriteLine($"–ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ: {task.Title}");
    }
    
    private void HandleAddTaskToColumn(string columnId)
    {
        Console.WriteLine($"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫—É: {columnId}");
        // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏
        isCreateModalVisible = true;
    }
    
    private void HandleAddColumn()
    {
        Console.WriteLine("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏");
    }
    
    private void HandleTaskMoved(TaskMovedEventArgs eventArgs)
    {
        try
        {
            // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
            var sourceColumn = kanbanColumns.FirstOrDefault(c => c.Id == eventArgs.FromColumnId);
            var task = sourceColumn?.Tasks.FirstOrDefault(t => t.Id == eventArgs.TaskId);
            
            if (task != null && sourceColumn != null)
            {
                // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
                sourceColumn.Tasks.Remove(task);
                
                // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                var targetColumn = kanbanColumns.FirstOrDefault(c => c.Id == eventArgs.ToColumnId);
                if (targetColumn != null)
                {
                    task.ColumnId = eventArgs.ToColumnId;
                    targetColumn.Tasks.Add(task);
                    
                    Console.WriteLine($"–ó–∞–¥–∞—á–∞ '{task.Title}' –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∏–∑ '{eventArgs.FromColumnId}' –≤ '{eventArgs.ToColumnId}'");
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {ex.Message}");
        }
    }
}

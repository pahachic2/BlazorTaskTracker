using TaskTracker.Models;
using TaskTracker.Models.DTOs;

namespace TaskTracker.Api.Services;

public class KanbanService : IKanbanService
{
    private readonly IDatabaseService<KanbanColumn> _columnDatabase;
    private readonly IDatabaseService<KanbanTask> _taskDatabase;
    private readonly IDatabaseService<Project> _projectDatabase;
    private readonly IDatabaseService<UserProject> _userProjectDatabase;
    private readonly IDatabaseService<UserOrganization> _userOrganizationDatabase;
    private readonly IDatabaseService<User> _userDatabase;

    public KanbanService(
        IDatabaseService<KanbanColumn> columnDatabase,
        IDatabaseService<KanbanTask> taskDatabase,
        IDatabaseService<Project> projectDatabase,
        IDatabaseService<UserProject> userProjectDatabase,
        IDatabaseService<UserOrganization> userOrganizationDatabase,
        IDatabaseService<User> userDatabase)
    {
        _columnDatabase = columnDatabase;
        _taskDatabase = taskDatabase;
        _projectDatabase = projectDatabase;
        _userProjectDatabase = userProjectDatabase;
        _userOrganizationDatabase = userOrganizationDatabase;
        _userDatabase = userDatabase;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
    public async Task<List<ColumnResponse>> GetProjectColumnsAsync(string projectId, string userId)
    {
        Console.WriteLine($"üîç API: –ó–∞–ø—Ä–æ—Å –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {projectId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if (!await HasProjectAccessAsync(projectId, userId))
        {
            Console.WriteLine($"‚ùå API: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É {projectId}");
            return new List<ColumnResponse>();
        }

        var columns = await _columnDatabase.FindAsync(c => c.ProjectId == projectId);
        var sortedColumns = columns.OrderBy(c => c.Order).ToList();

        Console.WriteLine($"üìÇ API: –ù–∞–π–¥–µ–Ω–æ {sortedColumns.Count} –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {projectId}");

        var result = new List<ColumnResponse>();
        foreach (var column in sortedColumns)
        {
            var tasks = await _taskDatabase.FindAsync(t => t.ColumnId == column.Id);
            var sortedTasks = tasks.OrderBy(t => t.Order).ToList();

            Console.WriteLine($"üìã API: –ö–æ–ª–æ–Ω–∫–∞ '{column.Title}' (ID: {column.Id}) —Å–æ–¥–µ—Ä–∂–∏—Ç {sortedTasks.Count} –∑–∞–¥–∞—á:");
            foreach (var task in sortedTasks)
            {
                Console.WriteLine($"   üìù API: –ó–∞–¥–∞—á–∞ '{task.Title}' (ID: {task.Id})");
            }

            result.Add(new ColumnResponse
            {
                Id = column.Id,
                Title = column.Title,
                ProjectId = column.ProjectId,
                Order = column.Order,
                CreatedAt = column.CreatedAt,
                UpdatedAt = column.UpdatedAt,
                Tasks = (await Task.WhenAll(sortedTasks.Select(async t => await MapTaskToResponseAsync(t)))).ToList()
            });
        }

        Console.WriteLine($"‚úÖ API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {result.Count} –∫–æ–ª–æ–Ω–æ–∫ —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á: {result.Sum(c => c.Tasks.Count)}");
        return result;
    }

    public async Task<ColumnResponse> CreateColumnAsync(CreateColumnRequest request, string userId)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if (!await HasProjectAccessAsync(request.ProjectId, userId))
            throw new UnauthorizedAccessException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É");

        var column = new KanbanColumn
        {
            Title = request.Title,
            ProjectId = request.ProjectId,
            Order = request.Order,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        await _columnDatabase.CreateAsync(column);

        return new ColumnResponse
        {
            Id = column.Id,
            Title = column.Title,
            ProjectId = column.ProjectId,
            Order = column.Order,
            CreatedAt = column.CreatedAt,
            UpdatedAt = column.UpdatedAt,
            Tasks = new List<TaskResponse>()
        };
    }

    public async Task<ColumnResponse?> UpdateColumnAsync(string columnId, UpdateColumnRequest request, string userId)
    {
        var column = await _columnDatabase.GetByIdAsync(columnId);
        if (column == null)
            return null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if (!await HasProjectAccessAsync(column.ProjectId, userId))
            return null;

        column.Title = request.Title;
        column.Order = request.Order;
        column.UpdatedAt = DateTime.UtcNow;

        await _columnDatabase.UpdateAsync(columnId, column);

        var tasks = await _taskDatabase.FindAsync(t => t.ColumnId == columnId);
        
        return new ColumnResponse
        {
            Id = column.Id,
            Title = column.Title,
            ProjectId = column.ProjectId,
            Order = column.Order,
            CreatedAt = column.CreatedAt,
            UpdatedAt = column.UpdatedAt,
            Tasks = (await Task.WhenAll(tasks.OrderBy(t => t.Order).Select(async t => await MapTaskToResponseAsync(t)))).ToList()
        };
    }

    public async Task<bool> DeleteColumnAsync(string columnId, string userId)
    {
        var column = await _columnDatabase.GetByIdAsync(columnId);
        if (column == null)
            return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if (!await HasProjectAccessAsync(column.ProjectId, userId))
            return false;

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ
        var tasks = await _taskDatabase.FindAsync(t => t.ColumnId == columnId);
        foreach (var task in tasks)
        {
            await _taskDatabase.DeleteAsync(task.Id);
        }

        await _columnDatabase.DeleteAsync(columnId);
        return true;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–¥–∞—á
    public async Task<List<TaskResponse>> GetColumnTasksAsync(string columnId, string userId)
    {
        var column = await _columnDatabase.GetByIdAsync(columnId);
        if (column == null)
            return new List<TaskResponse>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if (!await HasProjectAccessAsync(column.ProjectId, userId))
            return new List<TaskResponse>();

        var tasks = await _taskDatabase.FindAsync(t => t.ColumnId == columnId);
        var sortedTasks = tasks.OrderBy(t => t.Order);
        return (await Task.WhenAll(sortedTasks.Select(async t => await MapTaskToResponseAsync(t)))).ToList();
    }

    public async Task<TaskResponse?> GetTaskByIdAsync(string taskId, string userId)
    {
        var task = await _taskDatabase.GetByIdAsync(taskId);
        if (task == null)
        {
            Console.WriteLine($"‚ùå API: –ó–∞–¥–∞—á–∞ {taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ
            var allTasks = await _taskDatabase.FindAsync(t => true);
            Console.WriteLine($"üìä API: –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {allTasks.Count()}");
            
            if (allTasks.Any())
            {
                Console.WriteLine($"üìã API: –ü–µ—Ä–≤—ã–µ 5 –∑–∞–¥–∞—á –≤ –±–∞–∑–µ:");
                foreach (var t in allTasks.Take(5))
                {
                    Console.WriteLine($"   - ID: {t.Id}, Title: {t.Title}, Project: {t.ProjectId}, Column: {t.ColumnId}");
                }
            }
            
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if (!await HasProjectAccessAsync(task.ProjectId, userId))
            return null;

        return await MapTaskToResponseAsync(task);
    }

    public async Task<TaskResponse> CreateTaskAsync(CreateTaskRequest request, string userId)
    {
        var column = await _columnDatabase.GetByIdAsync(request.ColumnId);
        if (column == null)
            throw new ArgumentException("–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if (!await HasProjectAccessAsync(request.ProjectId, userId))
            throw new UnauthorizedAccessException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É");

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        var validatedAssigneeIds = await ValidateAssigneesAsync(request.AssigneeIds ?? new List<string>(), request.ProjectId);

        var task = new KanbanTask
        {
            Title = request.Title,
            Description = request.Description ?? string.Empty,
            Tags = request.Tags,
            AssigneeIds = validatedAssigneeIds,
            DueDate = request.DueDate,
            ColumnId = request.ColumnId,
            ProjectId = request.ProjectId,
            CreatedBy = userId,
            Priority = request.Priority,
            Status = Models.TaskStatus.ToDo,
            Order = await GetNextTaskOrderAsync(request.ColumnId),
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        await _taskDatabase.CreateAsync(task);
        Console.WriteLine($"‚úÖ KANBAN: –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {task.Id} —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏: {string.Join(", ", validatedAssigneeIds)}");

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ
        await UpdateProjectTaskCountAsync(request.ProjectId);

        return await MapTaskToResponseAsync(task);
    }

    public async Task<TaskResponse?> UpdateTaskAsync(string taskId, UpdateTaskRequest request, string userId)
    {
        var task = await _taskDatabase.GetByIdAsync(taskId);
        if (task == null)
            return null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if (!await HasProjectAccessAsync(task.ProjectId, userId))
            return null;

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        var validatedAssigneeIds = await ValidateAssigneesAsync(request.AssigneeIds ?? new List<string>(), task.ProjectId);

        task.Title = request.Title;
        task.Description = request.Description ?? string.Empty;
        task.Tags = request.Tags;
        task.AssigneeIds = validatedAssigneeIds;
        task.DueDate = request.DueDate;
        task.Priority = request.Priority;
        task.Status = request.Status;
        task.UpdatedAt = DateTime.UtcNow;

        await _taskDatabase.UpdateAsync(taskId, task);
        Console.WriteLine($"‚úÖ KANBAN: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {taskId} —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏: {string.Join(", ", validatedAssigneeIds)}");

        return await MapTaskToResponseAsync(task);
    }

    public async Task<bool> DeleteTaskAsync(string taskId, string userId)
    {
        var task = await _taskDatabase.GetByIdAsync(taskId);
        if (task == null)
            return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if (!await HasProjectAccessAsync(task.ProjectId, userId))
            return false;

        await _taskDatabase.DeleteAsync(taskId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ
        await UpdateProjectTaskCountAsync(task.ProjectId);

        return true;
    }

    public async Task<TaskResponse?> MoveTaskAsync(string taskId, MoveTaskRequest request, string userId)
    {
        Console.WriteLine($"üîç API: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {taskId} –≤ –∫–æ–ª–æ–Ω–∫—É {request.NewColumnId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {userId}");
        
        var task = await _taskDatabase.GetByIdAsync(taskId);
        if (task == null)
        {
            Console.WriteLine($"‚ùå API: –ó–∞–¥–∞—á–∞ {taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            return null;
        }

        Console.WriteLine($"‚úÖ API: –ó–∞–¥–∞—á–∞ {taskId} –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ {task.ProjectId}");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        var hasAccess = await HasProjectAccessAsync(task.ProjectId, userId);
        if (!hasAccess)
        {
            Console.WriteLine($"‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {userId} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É {task.ProjectId}");
            return null;
        }

        Console.WriteLine($"‚úÖ API: –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É {task.ProjectId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ –ø—Ä–æ–µ–∫—Ç—É
        var newColumn = await _columnDatabase.GetByIdAsync(request.NewColumnId);
        if (newColumn == null)
        {
            Console.WriteLine($"‚ùå API: –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ {request.NewColumnId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            return null;
        }
        
        if (newColumn.ProjectId != task.ProjectId)
        {
            Console.WriteLine($"‚ùå API: –ö–æ–ª–æ–Ω–∫–∞ {request.NewColumnId} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–µ–∫—Ç—É {newColumn.ProjectId}, –∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–µ–∫—Ç—É {task.ProjectId}");
            return null;
        }

        Console.WriteLine($"‚úÖ API: –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ {request.NewColumnId} –Ω–∞–π–¥–µ–Ω–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ –ø—Ä–æ–µ–∫—Ç—É");

        task.ColumnId = request.NewColumnId;
        task.Order = request.NewOrder;
        task.UpdatedAt = DateTime.UtcNow;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–æ–Ω–∫–∏
        var oldStatus = task.Status;
        task.Status = newColumn.Title.ToLower() switch
        {
            "to do" => Models.TaskStatus.ToDo,
            "in progress" => Models.TaskStatus.InProgress,
            "done" => Models.TaskStatus.Done,
            _ => task.Status
        };

        Console.WriteLine($"üîÑ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ - –∫–æ–ª–æ–Ω–∫–∞: {task.ColumnId}, –ø–æ—Ä—è–¥–æ–∫: {task.Order}, —Å—Ç–∞—Ç—É—Å: {oldStatus} -> {task.Status}");

        await _taskDatabase.UpdateAsync(taskId, task);

        Console.WriteLine($"‚úÖ API: –ó–∞–¥–∞—á–∞ {taskId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫—É {request.NewColumnId}");

        return await MapTaskToResponseAsync(task);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private async Task<bool> HasProjectAccessAsync(string projectId, string userId)
    {
        Console.WriteLine($"üîç API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId} –∫ –ø—Ä–æ–µ–∫—Ç—É {projectId}");
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
        var userProjects = await _userProjectDatabase.FindAsync(
            up => up.ProjectId == projectId && up.UserId == userId && up.IsActive);
        
        if (userProjects.Any())
        {
            Console.WriteLine($"‚úÖ API: –ù–∞–π–¥–µ–Ω –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É —á–µ—Ä–µ–∑ UserProject");
            return true;
        }
        
        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        var project = await _projectDatabase.GetByIdAsync(projectId);
        if (project == null)
        {
            Console.WriteLine($"‚ùå API: –ü—Ä–æ–µ–∫—Ç {projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return false;
        }
        
        Console.WriteLine($"üîç API: –ü—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {project.OrganizationId}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–ª–µ–Ω–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        var userOrganizations = await _userOrganizationDatabase.FindAsync(
            uo => uo.OrganizationId == project.OrganizationId && uo.UserId == userId && uo.IsActive);
        
        var hasOrgAccess = userOrganizations.Any();
        Console.WriteLine($"üîç API: –î–æ—Å—Ç—É–ø –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {project.OrganizationId}: {hasOrgAccess}");
        
        if (!hasOrgAccess)
        {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            var allUserProjects = await _userProjectDatabase.FindAsync(up => up.UserId == userId);
            var allUserOrgs = await _userOrganizationDatabase.FindAsync(uo => uo.UserId == userId);
            Console.WriteLine($"üìä API: –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}: {allUserProjects.Count()}");
            Console.WriteLine($"üìä API: –í—Å–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}: {allUserOrgs.Count()}");
            
            var projectConnections = await _userProjectDatabase.FindAsync(up => up.ProjectId == projectId);
            Console.WriteLine($"üìä API: –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ {projectId}: {projectConnections.Count()}");
        }
        
        return hasOrgAccess;
    }

    private async Task<int> GetNextTaskOrderAsync(string columnId)
    {
        var tasks = await _taskDatabase.FindAsync(t => t.ColumnId == columnId);
        return tasks.Any() ? tasks.Max(t => t.Order) + 1 : 0;
    }

    private async Task UpdateProjectTaskCountAsync(string projectId)
    {
        var tasks = await _taskDatabase.FindAsync(t => t.ProjectId == projectId);
        var project = await _projectDatabase.GetByIdAsync(projectId);
        
        if (project != null)
        {
            project.TaskCount = tasks.Count();
            project.UpdatedAt = DateTime.UtcNow;
            await _projectDatabase.UpdateAsync(projectId, project);
        }
    }

    private static TaskResponse MapTaskToResponse(KanbanTask task)
    {
        return new TaskResponse
        {
            Id = task.Id,
            Title = task.Title,
            Description = task.Description,
            Tags = task.Tags,
            Assignees = task.Assignees,
            DueDate = task.DueDate,
            ColumnId = task.ColumnId,
            ProjectId = task.ProjectId,
            CreatedBy = task.CreatedBy,
            Order = task.Order,
            Priority = task.Priority,
            Status = task.Status,
            CreatedAt = task.CreatedAt,
            UpdatedAt = task.UpdatedAt
        };
    }

    private async Task<List<string>> ValidateAssigneesAsync(List<string> assigneeIds, string projectId)
    {
        var validatedAssigneeIds = new List<string>();
        var project = await _projectDatabase.GetByIdAsync(projectId);

        if (project == null)
        {
            Console.WriteLine($"‚ùå KANBAN: –ü—Ä–æ–µ–∫—Ç {projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π");
            return validatedAssigneeIds;
        }

        Console.WriteLine($"üîç KANBAN: –í–∞–ª–∏–¥–∞—Ü–∏—è {assigneeIds.Count} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {projectId}");

        foreach (var assigneeId in assigneeIds)
        {
            var user = await _userDatabase.GetByIdAsync(assigneeId);
            if (user == null)
            {
                Console.WriteLine($"‚ùå KANBAN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {assigneeId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É —á–µ—Ä–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            var userOrganizations = await _userOrganizationDatabase.FindAsync(
                uo => uo.OrganizationId == project.OrganizationId && uo.UserId == assigneeId && uo.IsActive);
            
            if (userOrganizations.Any())
            {
                validatedAssigneeIds.Add(assigneeId);
                Console.WriteLine($"‚úÖ KANBAN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Username} ({assigneeId}) –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º");
            }
            else
            {
                Console.WriteLine($"‚ùå KANBAN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Username} ({assigneeId}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {project.OrganizationId}");
            }
        }

        Console.WriteLine($"‚úÖ KANBAN: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ {validatedAssigneeIds.Count} –∏–∑ {assigneeIds.Count} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π");
        return validatedAssigneeIds;
    }

    private async Task<TaskResponse> MapTaskToResponseAsync(KanbanTask task)
    {
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        await MigrateLegacyTaskData(task);
        
        // –ë–∞–∑–æ–≤–æ–µ –º–∞–ø–ø–∏–Ω–≥
        var response = MapTaskToResponse(task);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
        if (task.AssigneeIds.Any())
        {
            var assignees = await _userDatabase.FindAsync(u => task.AssigneeIds.Contains(u.Id));
            var assigneesList = assignees.ToList();
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º Assignees –¥–ª—è UI —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∏–º–µ–Ω–∞)
            response.Assignees = assigneesList.Select(u => u.Username).ToList();
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º AssigneeDetails –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if (response.AssigneeDetails == null)
                response.AssigneeDetails = new List<TaskAssigneeInfo>();
            
            foreach (var assignee in assigneesList)
            {
                response.AssigneeDetails.Add(new TaskAssigneeInfo
                {
                    UserId = assignee.Id,
                    Username = assignee.Username,
                    Email = assignee.Email
                });
            }
        }

        return response;
    }

    /// <summary>
    /// –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ assignees –≤ AssigneeIds –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    /// </summary>
    private async Task MigrateLegacyTaskData(KanbanTask task)
    {
        bool needsUpdate = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ AssigneeIds
        if (task.AssigneeIds.Any())
        {
            var validAssigneeIds = new List<string>();
            foreach (var assigneeId in task.AssigneeIds)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π ObjectId (24 —Å–∏–º–≤–æ–ª–∞ hex)
                if (MongoDB.Bson.ObjectId.TryParse(assigneeId, out _))
                {
                    validAssigneeIds.Add(assigneeId);
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è API: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π AssigneeId '{assigneeId}' –≤ –∑–∞–¥–∞—á–µ {task.Id}, —É–¥–∞–ª—è—é");
                    needsUpdate = true;
                }
            }
            
            if (needsUpdate)
            {
                task.AssigneeIds = validAssigneeIds;
                // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ Assignees
                if (task.Assignees.Any())
                {
                    Console.WriteLine($"üîÑ API: –ü—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏ {task.Id}");
                    foreach (var assigneeName in task.Assignees)
                    {
                        var users = await _userDatabase.FindAsync(u => u.Username == assigneeName);
                        var user = users.FirstOrDefault();
                        if (user != null && !task.AssigneeIds.Contains(user.Id))
                        {
                            task.AssigneeIds.Add(user.Id);
                            Console.WriteLine($"‚úÖ API: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {assigneeName} -> {user.Id}");
                        }
                    }
                }
            }
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ assignees –∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö AssigneeIds
        if (task.LegacyAssignees != null && task.LegacyAssignees.Any() && !task.AssigneeIds.Any())
        {
            Console.WriteLine($"üîÑ API: –ú–∏–≥—Ä–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ assignees –¥–ª—è –∑–∞–¥–∞—á–∏ {task.Id}");
            
            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ assignees –≤ AssigneeIds
            task.AssigneeIds = new List<string>(task.LegacyAssignees);
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
            task.LegacyAssignees = null;
            needsUpdate = true;
            
            Console.WriteLine($"‚úÖ API: –î–∞–Ω–Ω—ã–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∑–∞–¥–∞—á–∏ {task.Id}: {task.AssigneeIds.Count} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π");
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (needsUpdate)
        {
            await _taskDatabase.UpdateAsync(task.Id, task);
            Console.WriteLine($"üíæ API: –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ {task.Id}");
        }
    }
} 
using TaskTracker.Models;

namespace TaskTracker.Api.Services;

public class DataSeederService
{
    private readonly IDatabaseService<User> _userDatabase;
    private readonly IDatabaseService<Project> _projectDatabase;
    private readonly IDatabaseService<UserProject> _userProjectDatabase;
    private readonly IDatabaseService<KanbanColumn> _columnDatabase;
    private readonly IDatabaseService<KanbanTask> _taskDatabase;
    private readonly IUserService _userService;

    public DataSeederService(
        IDatabaseService<User> userDatabase,
        IDatabaseService<Project> projectDatabase,
        IDatabaseService<UserProject> userProjectDatabase,
        IDatabaseService<KanbanColumn> columnDatabase,
        IDatabaseService<KanbanTask> taskDatabase,
        IUserService userService)
    {
        _userDatabase = userDatabase;
        _projectDatabase = projectDatabase;
        _userProjectDatabase = userProjectDatabase;
        _columnDatabase = columnDatabase;
        _taskDatabase = taskDatabase;
        _userService = userService;
    }

    public async Task SeedDataAsync()
    {
        Console.WriteLine("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        var existingProjects = await _projectDatabase.GetAllAsync();
        if (existingProjects.Any())
        {
            Console.WriteLine("üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–µ–∫—Ç—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        var users = await CreateTestUsersAsync();
        Console.WriteLine($"üë• –°–æ–∑–¥–∞–Ω–æ {users.Count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
        var projects = await CreateTestProjectsAsync(users);
        Console.WriteLine($"üìÇ –°–æ–∑–¥–∞–Ω–æ {projects.Count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤");

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
        var columns = await CreateTestColumnsAsync(projects);
        Console.WriteLine($"üìã –°–æ–∑–¥–∞–Ω–æ {columns.Count} –∫–æ–ª–æ–Ω–æ–∫");

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        var tasks = await CreateTestTasksAsync(projects, columns, users);
        Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω–æ {tasks.Count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á");

        Console.WriteLine("üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    }

    private async Task<List<User>> CreateTestUsersAsync()
    {
        var users = new List<User>();

        var testUsers = new[]
        {
            new { Username = "anna.ivanova", Email = "anna@example.com", Password = "password123" },
            new { Username = "petr.sidorov", Email = "petr@example.com", Password = "password123" },
            new { Username = "maria.petrova", Email = "maria@example.com", Password = "password123" },
            new { Username = "ivan.kozlov", Email = "ivan@example.com", Password = "password123" }
        };

        foreach (var userData in testUsers)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            var existingUsers = await _userDatabase.FindAsync(u => u.Email == userData.Email);
            if (existingUsers.Any())
            {
                users.Add(existingUsers.First());
                continue;
            }

            var hashedPassword = BCrypt.Net.BCrypt.HashPassword(userData.Password);
            var user = new User
            {
                Username = userData.Username,
                Email = userData.Email,
                PasswordHash = hashedPassword,
                CreatedAt = DateTime.UtcNow,
                IsActive = true
            };

            await _userDatabase.CreateAsync(user);
            users.Add(user);
        }

        return users;
    }

    private async Task<List<Project>> CreateTestProjectsAsync(List<User> users)
    {
        var projects = new List<Project>();
        var owner = users.First(); // –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞ –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

        var projectsData = new[]
        {
            new {
                Name = "TaskTracker Pro",
                Description = "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
                Icon = "üöÄ",
                Color = "bg-blue-500",
                Members = new string[] { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "–ò–≤–∞–Ω –ö–æ–∑–ª–æ–≤" }
            },
            new {
                Name = "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                Description = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ iOS –∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                Icon = "üì±",
                Color = "bg-green-500",
                Members = new string[] { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" }
            },
            new {
                Name = "–î–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º–∞",
                Description = "UI/UX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –≥–∞–π–¥–ª–∞–π–Ω—ã",
                Icon = "üé®",
                Color = "bg-purple-500",
                Members = new string[] { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞" }
            }
        };

        foreach (var projectData in projectsData)
        {
            var project = new Project
            {
                Name = projectData.Name,
                Description = projectData.Description,
                Icon = projectData.Icon,
                Color = projectData.Color,
                OwnerId = owner.Id,
                CreatedDate = DateTime.UtcNow.AddDays(-30 + projects.Count * 10),
                UpdatedAt = DateTime.UtcNow,
                IsActive = true,
                TaskCount = 0,
                Members = projectData.Members.ToList()
            };

            await _projectDatabase.CreateAsync(project);
            projects.Add(project);

            // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–µ–∫—Ç–æ–º
            foreach (var memberName in projectData.Members)
            {
                var user = users.FirstOrDefault(u => u.Username.Contains(memberName.Split(' ')[0].ToLower()));
                if (user != null)
                {
                    var userProject = new UserProject
                    {
                        UserId = user.Id,
                        ProjectId = project.Id,
                        Role = user.Id == owner.Id ? ProjectRole.Owner : ProjectRole.Member,
                        JoinedAt = DateTime.UtcNow,
                        IsActive = true
                    };

                    await _userProjectDatabase.CreateAsync(userProject);
                }
            }
        }

        return projects;
    }

    private async Task<List<KanbanColumn>> CreateTestColumnsAsync(List<Project> projects)
    {
        var columns = new List<KanbanColumn>();

        var columnNames = new[] { "–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" };

        foreach (var project in projects)
        {
            for (int i = 0; i < columnNames.Length; i++)
            {
                var column = new KanbanColumn
                {
                    Title = columnNames[i],
                    ProjectId = project.Id,
                    Order = i + 1, // –ù–∞—á–∏–Ω–∞–µ–º —Å 1
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };

                await _columnDatabase.CreateAsync(column);
                columns.Add(column);
            }
        }

        return columns;
    }

    private async Task<List<KanbanTask>> CreateTestTasksAsync(
        List<Project> projects, 
        List<KanbanColumn> columns, 
        List<User> users)
    {
        var tasks = new List<KanbanTask>();
        var firstProject = projects.First();
        var projectColumns = columns.Where(c => c.ProjectId == firstProject.Id).ToList();

        // –ó–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (TaskTracker Pro)
        var tasksData = new List<dynamic>
        {
            new {
                Title = "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                Description = "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Figma —Å —É—á–µ—Ç–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö UX –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤",
                Tags = new string[] { "Design", "Frontend", "Urgent" },
                Assignees = new string[] { "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞" },
                DueDate = DateTime.UtcNow.AddDays(3),
                ColumnIndex = 0, // –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
                Priority = TaskPriority.High
            },
            new {
                Title = "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD pipeline",
                Description = "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–µ–ø–ª–æ—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                Tags = new string[] { "Backend", "DevOps" },
                Assignees = new string[] { "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                DueDate = DateTime.UtcNow.AddDays(5),
                ColumnIndex = 0, // –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
                Priority = TaskPriority.Medium
            },
            new {
                Title = "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
                Description = "JWT —Ç–æ–∫–µ–Ω—ã, refresh tokens, —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                Tags = new string[] { "Backend", "Feature" },
                Assignees = new string[] { "–ò–≤–∞–Ω –ö–æ–∑–ª–æ–≤", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                DueDate = DateTime.UtcNow.AddDays(2),
                ColumnIndex = 1, // –í –ø—Ä–æ—Ü–µ—Å—Å–µ
                Priority = TaskPriority.High
            },
            new {
                Title = "–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                Description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL, –º–∏–≥—Ä–∞—Ü–∏–∏",
                Tags = new string[] { "Backend", "Database" },
                Assignees = new string[] { "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤" },
                DueDate = (DateTime?)null,
                ColumnIndex = 3, // –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                Priority = TaskPriority.Medium
            },
            new {
                Title = "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API",
                Description = "Unit —Ç–µ—Å—Ç—ã, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã",
                Tags = new string[] { "Testing", "QA" },
                Assignees = new string[] { "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞" },
                DueDate = DateTime.UtcNow.AddDays(7),
                ColumnIndex = 2, // –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
                Priority = TaskPriority.Medium
            }
        };

        for (int i = 0; i < tasksData.Count; i++)
        {
            var taskData = tasksData[i];
            var targetColumn = projectColumns[taskData.ColumnIndex];
            var creator = users.First(); // –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞

            var task = new KanbanTask
            {
                Title = taskData.Title,
                Description = taskData.Description,
                Tags = ((string[])taskData.Tags).ToList(),
                Assignees = ((string[])taskData.Assignees).ToList(),
                DueDate = taskData.DueDate,
                ColumnId = targetColumn.Id,
                ProjectId = firstProject.Id,
                CreatedBy = creator.Id,
                Order = i,
                Priority = taskData.Priority,
                Status = taskData.ColumnIndex switch
                {
                    0 => Models.TaskStatus.ToDo,
                    1 => Models.TaskStatus.InProgress,
                    2 => Models.TaskStatus.Review,
                    3 => Models.TaskStatus.Done,
                    _ => Models.TaskStatus.ToDo
                },
                CreatedAt = DateTime.UtcNow.AddDays(-i),
                UpdatedAt = DateTime.UtcNow
            };

            await _taskDatabase.CreateAsync(task);
            tasks.Add(task);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ
        firstProject.TaskCount = tasks.Count;
        await _projectDatabase.UpdateAsync(firstProject.Id, firstProject);

        return tasks;
    }
} 